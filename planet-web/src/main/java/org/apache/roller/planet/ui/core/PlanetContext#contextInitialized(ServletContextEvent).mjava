    /**
     * Responds to context initialization event by processing context
     * paramters for easy access by the rest of the application.
     */
    public void contextInitialized(ServletContextEvent sce) {
        
        log.info("Roller Planet Initializing ... ");
        
        // keep a reverence to ServletContext object
        this.context = sce.getServletContext();
        
        // call Spring's context ContextLoaderListener to initialize
        // all the context files specified in web.xml. This is necessary
        // because listeners don't initialize in the order specified in
        // 2.3 containers
        super.contextInitialized(sce);
                
        // Now prepare the core services of the app so we can bootstrap
        try {
            PlanetStartup.prepare();
        } catch (StartupException ex) {
            log.fatal("Roller Planet startup failed during app preparation", ex);
            return;
        }        
        
        // if preparation failed or is incomplete then we are done,
        // otherwise try to bootstrap the business tier
        if (!PlanetStartup.isPrepared()) {
            log.info("Roller Planet startup requires interaction from user to continue");
        } else {
            try {
                // trigger bootstrapping process
                PlanetFactory.bootstrap();
                
                // trigger initialization process
                PlanetFactory.getPlanet().initialize();
                
            } catch (BootstrapException ex) {
                log.fatal("Roller PlanetFactory bootstrap failed", ex);
            } catch (PlanetException ex) {
                log.fatal("Roller PlanetFactory initialization failed", ex);
            }
        }
        
        log.info("Roller Planet Initialization Complete");
    }

