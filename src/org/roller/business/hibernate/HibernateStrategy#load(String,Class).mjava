    //-------------------------------------------------------------------------
    /**
     * Retrieve object, begins and ends its own transaction.
     * @param clazz Class of object to retrieve.
     * @param id Id of object to retrieve.
     * @return Object Object retrieved.
     * @throws RollerException Error retrieving object.
     */
    public PersistentObject load(String id, Class clazz)
        throws RollerException
    {
        if ( id == null )
        {
            throw new RollerException(Messages.getString(
                "HibernateStrategy.nullNotValidId"));
        }

        if ( clazz == null )
        {
            throw new RollerException(Messages.getString(
                "HibernateStrategy.nullNotValidClass"));
        }

        Object obj = null;
        Session ses = getSession();
        try
        {
            obj = (PersistentObject)ses.load( clazz, id );
        }
        catch (Exception e)
        {
            if (mLogger.isDebugEnabled())
            {
                String msg = Messages.formatString(
                 "HibernateStrategy.exceptionRetrieving", id, clazz.getName());
                mLogger.debug(msg, e);
            }

            // Gavin: "make sure you never catch + handle an exception and
            // then keep using the session (ObjectNotFoundException included!)"
            release();
        }
        return (PersistentObject)obj;
    }

