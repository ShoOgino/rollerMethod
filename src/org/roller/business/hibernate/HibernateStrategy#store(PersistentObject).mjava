    //-------------------------------------------------------------------------
    /**
     * Store object using an existing transaction.
     */
    public PersistentObject store(PersistentObject obj)
        throws RollerException
    {
        if ( obj == null )
        {
            throw new RollerException(Messages.getString(
                "HibernateStrategy.nullPassedIn"));
        }
        if (!obj.canSave())
        {
            throw new RollerPermissionsException(
                "DENIED: cannot save: "+obj.toString());
        }
        Session ses = getSession();
        try
        {
            // TODO: better to use ses.saveOrUpdate() here, if possible
            if ( obj.getId() == null || obj.getId().trim().equals("") )
            {
                // Object has never been written to database, so save it.
                // This makes obj into a persistent instance.
                ses.save(obj);
            }

            if ( !ses.contains(obj) )
            {
                // Object has been written to database, but instance passed in
                // is not a persistent instance, so must be loaded into session.
                PersistentObject vo =
                    (PersistentObject)ses.load(obj.getClass(),obj.getId());
                vo.setData(obj);
                obj = vo;
            }
        }
        catch (HibernateException e)
        {
            String msg = Messages.formatString(
                "HibernateStrategy.exceptionStoring",obj.getId());
            mLogger.error(msg, e);
            newSession();
            throw new RollerException(msg,e);
        }
        return obj;
    }

