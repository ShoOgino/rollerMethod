    /** Save this  object and ancestoral associations. */
    public void save() throws RollerException
    {
        boolean fresh = (getId() == null || "".equals(getId()));
        PersistenceStrategy pstrategy =
            RollerFactory.getRoller().getPersistenceStrategy();
        pstrategy.store(this);
        if (fresh)
        {
            // Every fresh cat needs a parent assoc     
            Assoc parentAssoc = createAssoc(
                this, mNewParent, Assoc.PARENT);
            parentAssoc.save();
        }
        else if (null != mNewParent)
        {
            // New parent must be added to parentAssoc
            Assoc parentAssoc = getParentAssoc();
            parentAssoc.setAncestor(mNewParent);
            parentAssoc.save();
        }
        
        // Clear out existing grandparent associations
        Iterator ancestors = getAncestorAssocs().iterator();
        while (ancestors.hasNext())
        {
            Assoc assoc = (Assoc)ancestors.next();
            if (assoc.getRelation().equals(Assoc.GRANDPARENT))
            {
                assoc.remove();
            }
        }
        
        // Walk parent assocations, creating new grandparent associations
        int count = 0;
        Assoc currentAssoc = getParentAssoc();               
        while (null != currentAssoc.getAncestor())
        {
            if (count > 0) 
            {
                Assoc assoc = createAssoc(this, 
                    currentAssoc.getAncestor(), 
                    Assoc.GRANDPARENT);
                assoc.save();
            }                
            currentAssoc = currentAssoc.getAncestor().getParentAssoc();
            count++;
        }

        Iterator children = getChildAssocs().iterator();
        while (children.hasNext())
        {
            Assoc assoc = (Assoc) children.next();
            
            // resetting parent will cause reset of ancestors links
            assoc.getObject().setParent(this);
            
            // recursively...
            assoc.getObject().save();    
        }
    
        // Clear new parent now that new parent has been saved
        mNewParent = null;
    }

