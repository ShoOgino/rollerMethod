    /**
     * Connect to the web for blacklist.  Check to
     * see if a newer version exists before parsing.
     */
    private Blacklist extractFromURL()
    {
        // now see if we can update it from the web
        Blacklist oldBlacklist = getBlacklist(null);
        Blacklist newBlacklist = new Blacklist();
        try 
        {
            URL url = new URL(blacklistURL);
            HttpURLConnection connection = (HttpURLConnection)url.openConnection();
            if (oldBlacklist.ifModifiedSince != null)
            {
                connection.setRequestProperty("If-Modified-Since", 
                                              DateUtil.formatRfc822(oldBlacklist.ifModifiedSince));
            }
            
            // did the connection return NotModified? If so, no need to parse
            if ( connection.getResponseCode() == HttpURLConnection.HTTP_NOT_MODIFIED)
            {
                // we already have a current blacklist
                return oldBlacklist;
            }
            
            // did the connection return a LastModified header?
            long lastModifiedLong = connection.getHeaderFieldDate("Last-Modified", -1);
            
            // if no ifModifiedSince, or lastModifiedLong is newer, then read stream
            if (oldBlacklist.ifModifiedSince == null || 
                oldBlacklist.ifModifiedSince.getTime() < lastModifiedLong)
            {  
                String results = newBlacklist.readFromStream( connection.getInputStream(), true );
                
                // save the new blacklist
                newBlacklist.writeToFile(results);
                
                if (newBlacklist.ifModifiedSince == null && lastModifiedLong != -1)
                {
                    newBlacklist.ifModifiedSince = new Date(lastModifiedLong);
                }
                
                return newBlacklist;
            }            
        } 
        catch (MalformedURLException e)
        {
            mLogger.info(e);
        } 
        catch (IOException e) 
        {
            mLogger.info(e);
        }
        return oldBlacklist;
    }

