    /**
     * Allows user to post a binary object, a file, to Roller. If the file is 
     * allowed by the RollerConfig file-upload settings, then the file will be 
     * placed in the user's upload diretory.
     */
    public Object newMediaObject(
            String blogid, String userid, String password, Hashtable struct) 
        throws Exception
    {
        mLogger.debug("newMediaObject() Called =[ SUPPORTED ]=====");
        mLogger.debug("     BlogId: " + blogid);
        mLogger.debug("     UserId: " + userid);
        mLogger.debug("   Password: *********");

        WebsiteData website = validate(blogid, userid, password);
        try
        {
            String name = (String) struct.get("name");    
            name = name.replaceAll("/","_");
            String type = (String) struct.get("type");
            mLogger.debug("newMediaObject name: " + name);
            mLogger.debug("newMediaObject type: " + type);
            
            byte[] bits = (byte[]) struct.get("bits");

            Roller roller = RollerFactory.getRoller(); 
            FileManager fmgr = roller.getFileManager();
            RollerMessages msgs = new RollerMessages();
            
            // If save is allowed by Roller system-wide policies
            if (fmgr.canSave(website, name, bits.length, msgs)) 
            {
                // Then save the file
                fmgr.saveFile(
                    website, name, bits.length, new ByteArrayInputStream(bits));
                
                RollerRequest rreq = RollerRequest.getRollerRequest();
                HttpServletRequest request = rreq.getRequest();
                
                // TODO: build URL to uploaded file should be done in FileManager
                String uploadPath = RollerContext.getUploadPath(
                        request.getSession(true).getServletContext());
                uploadPath += "/" + website.getHandle() + "/" + name;
                String fileLink = RequestUtils.printableURL(
                        RequestUtils.absoluteURL(request, uploadPath));
                
                Hashtable returnStruct = new Hashtable(1);
                returnStruct.put("url", fileLink);
                return returnStruct;
            }
            throw new XmlRpcException(UPLOAD_DENIED_EXCEPTION, 
                "File upload denied because:" + msgs.toString());
        }
        catch (RollerException e)
        {
            String msg = "ERROR in BlooggerAPIHander.newMediaObject";
            mLogger.error(msg,e);
            throw new XmlRpcException(UNKNOWN_EXCEPTION, msg);
        }
    }

