    //------------------------------------------------------------------------
    /**
     * Returns website, but only if user authenticates and is authorized to edit.
     * @param blogid   Blogid sent in request (used as website's hanldle)
     * @param username Username sent in request
     * @param password Password sent in requeset
     */
    protected WebsiteData validate(String blogid, String username, String password) 
    throws Exception
    {
        boolean authenticated = false;
        boolean enabled = false;
        WebsiteData website = null;
        UserData user = null;
        try
        {
            // Get Roller request object for current thread
            RollerRequest rreq = RollerRequest.getRollerRequest();
            
            UserManager userMgr = RollerFactory.getRoller().getUserManager();
            website = userMgr.getWebsiteByHandle(blogid);
            user = userMgr.getUser(username);
            
            enabled = website.getEnableBloggerApi().booleanValue() 
                   && website.getEnabled().booleanValue() 
                      && user.getEnabled().booleanValue();
            if (enabled)
            {    
                // are passwords encrypted?
                RollerContext rollerContext = 
                    RollerContext.getRollerContext(rreq.getRequest());
                String encrypted = 
                        RollerConfig.getProperty("passwds.encryption.enabled");
                //System.out.print("password was [" + password + "] ");
                if ("true".equalsIgnoreCase(encrypted)) 
                {
                	password = Utilities.encodePassword(password, 
                      RollerConfig.getProperty("passwds.encryption.algorithm"));
                }
                //System.out.println("is now [" + password + "]");
    			   authenticated= user.getPassword().equals(password);
                if (authenticated)
                {
                    RollerFactory.getRoller().setUser(user);
                }
            }
        }
        catch (Exception e)
        {
            mLogger.error("ERROR internal error validating user", e);
        }
        
        if ( !enabled )
        {
            throw new XmlRpcException(
                BLOGGERAPI_DISABLED, BLOGGERAPI_DISABLED_MSG);
        }
        
        if ( !authenticated )
        {
            throw new XmlRpcException(
                AUTHORIZATION_EXCEPTION, AUTHORIZATION_EXCEPTION_MSG);
        }
        return website;
    }

