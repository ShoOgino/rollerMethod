    private void sendEmailNotification(
        HttpServletRequest request,
        RollerRequest rreq,
        WeblogEntryData wd,
        CommentData cd,
        UserData user,
        List comments)
        throws MalformedURLException
    {
        RollerContext rc = RollerContext.getRollerContext( request );
        RollerConfig rollerConfig = rc.getRollerConfig();
        
		MessageResources resources = getResources(request);
		Locale viewLocale = LanguageUtil.getViewLocale(request);
        
        UserManager userMgr = null;
        WebsiteData site = null;
        try 
        {
            userMgr = RollerContext.getRoller(request).getUserManager(); 
            site = userMgr.getWebsite(user.getUserName());
        } 
        catch (RollerException re)
        {
            re.printStackTrace();
            mLogger.error("Couldn't get UserManager from RollerContext", re.getRootCause());
        }
        
        // Send e-mail to owner (if enabled) and subscribed users
        if ( rollerConfig.getEmailComments().booleanValue() &&
                site.getEmailComments().booleanValue() )
        {
            
            String defaultFromEmail = (StringUtils.isEmpty(site.getEmailFromAddress())) ? 
                                       user.getEmailAddress() : site.getEmailFromAddress();
            
        	String from = (StringUtils.isEmpty(cd.getEmail()))
        					? defaultFromEmail : cd.getEmail();

        	// get all the subscribers to this comment thread
        	ArrayList subscribers = new ArrayList();
        	for (Iterator it = comments.iterator(); it.hasNext();) 
        	{
        		CommentData comment = (CommentData) it.next();
        		// only add the subscriber if they don't already exist
        		if (   ! StringUtils.isEmpty(comment.getEmail())
        			&& ! subscribers.contains(comment.getEmail())
        			&& ! StringUtils.equals(comment.getEmail(), 
        					                user.getEmailAddress())) 
        		{
        			subscribers.add(comment.getEmail());
        		}
        	}

        	// There's got to be an easier way, but I'm in a hurry ;-)
        	String[] cc = new String[subscribers.size()];
        	for (int i = 0; i < subscribers.size(); i++)
        	{
        		cc[i] = (String) subscribers.get(i);
        	}

        	StringBuffer msg = new StringBuffer();

            // determine with mime type to use for e-mail
        	boolean escapeHtml = rollerConfig.getEscapeCommentHtml().booleanValue();
        	if (!escapeHtml)
        	{
        		msg.append("<html><body style=\"background: white; ");
        		msg.append(" color: black; font-size: 12px\">");
        	}

			if (!StringUtils.isEmpty(cd.getName()))
			{
				msg.append(cd.getName() + " " + resources.getMessage(viewLocale, "email.comment.wrote") + ": ");
			}
			else
			{
				msg.append(resources.getMessage(viewLocale, "email.comment.anonymous") + ": ");
			}

        	msg.append((escapeHtml) ? "\n\n" : "<br /><br />");
        	msg.append(cd.getContent());
            msg.append((escapeHtml) ? "\n\n----\n" :
        		"<br /><br /><hr /><span style=\"font-size: 11px\">");
			msg.append(resources.getMessage(viewLocale, "email.comment.respond") + ": ");
        	msg.append((escapeHtml) ? "\n" : "<br />");

        	// build link back to comment
        	StringBuffer commentURL = new StringBuffer();
        	commentURL.append(RequestUtils.serverURL(request));
        	commentURL.append(request.getContextPath()+"/page/");
        	commentURL.append(rreq.getUser().getUserName());
        	PageData page = rreq.getPage();
        	if (page == null)
        	{
        		commentURL.append("?anchor=");
        	}
        	else
        	{
        		commentURL.append("/").append(page.getLink()).append("/");
        	}

        	commentURL.append(wd.getAnchor());

        	if (escapeHtml)
        	{
        		msg.append(commentURL.toString());
        	}
        	else
        	{
        		msg.append("<a href=\"" + commentURL + "\">" + commentURL + "</a></span>");
        		msg.append("</body></html>");
        	}

        	String subject = null;

			if ( (subscribers.size() > 1) ||
				 (StringUtils.equals(cd.getEmail(), user.getEmailAddress()) ))
			{
				subject = "RE: " + resources.getMessage(viewLocale, "email.comment.title") + ": ";
			}
			else
			{
				subject = resources.getMessage(viewLocale, "email.comment.title") + ": ";
			}

        	subject += wd.getTitle();

        	try
            {
        		Context ctx = (Context)
                new InitialContext().lookup("java:comp/env");
        		Session session = (Session) ctx.lookup("mail/Session");
        		if (escapeHtml)
                {
                    // signifies plain text
                    // from, to, subject, content
        			MailUtil.sendTextMessage(session, from,
        			  user.getEmailAddress(), cc,
        		      subject, msg.toString());
        		}
                else
                {
        			MailUtil.sendHTMLMessage(session, from,
        			  user.getEmailAddress(), cc,
        			  subject, msg.toString());
        		}
        	}
            catch (NamingException ne)
            {
        		log.error("NamingException: " + ne.getMessage());
        		log.warn("Looking up mail session in JNDI failed!");
        	}
            catch (MessagingException me)
            {
        		log.error("MessagingException: " + me.getMessage());
        		log.warn("Sending comments e-mail failed!");
        	}

        }

    }

