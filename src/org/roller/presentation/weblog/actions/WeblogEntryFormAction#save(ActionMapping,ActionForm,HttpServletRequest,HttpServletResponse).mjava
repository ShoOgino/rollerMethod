    //-----------------------------------------------------------------------
    /**
     * Saves weblog entry and flushes page cache so that new entry will appear 
     * on users weblog page.
     */
    public ActionForward save(
        ActionMapping       mapping,
        ActionForm          actionForm,
        HttpServletRequest  request,
        HttpServletResponse response)
        throws IOException, ServletException
    {
        ActionForward forward = mapping.findForward("weblogEdit.page");
        ActionMessages uiMessages = new ActionMessages();
        try
        {
            WeblogEntryFormEx    wf = (WeblogEntryFormEx)actionForm;
            Roller           roller = RollerFactory.getRoller();
            RollerSession      rses = RollerSession.getRollerSession(request);
            UserManager     userMgr = roller.getUserManager();
            WeblogManager weblogMgr = roller.getWeblogManager();
            WebsiteData        site = rses.getCurrentWebsite();
            WeblogEntryData   entry = null;
            
            if ( rses.isUserAuthorizedToAuthor() 
                 || (rses.isUserAuthorized() 
                        && !wf.getStatus().equals(WeblogEntryData.PUBLISHED) ))
            {                             
                if (wf.getId() == null || wf.getId().trim().length()==0) 
                {
                    entry = new WeblogEntryData();  
                    UserData ud = userMgr.retrieveUser(
                            rses.getAuthenticatedUser().getId());
                    entry.setCreator(ud);
                    entry.setWebsite( site );
                }
                else 
                {
                    entry = weblogMgr.retrieveWeblogEntry(wf.getId());
                    entry.save(); // should throw if save not permitted
                }
                wf.copyTo(entry, request.getLocale(),request.getParameterMap());

                // Fetch MediaCast content type and length
                mLogger.debug("Checking MediaCast attributes");
                if (!checkMediaCast(entry)) 
                {
                   mLogger.debug("Invalid MediaCast attributes");
                   uiMessages.add(null, 
                     new ActionMessage("weblogEdit.message.mediaCastProblem"));
                }
                else if (mLogger.isDebugEnabled()) 
                {
                   mLogger.debug("Invalid MediaCast attributes");
                }

                // Store value object (creates new or updates existing)
                entry.setUpdateTime(new Timestamp(new Date().getTime()));
                mLogger.debug("Saving entry");
                entry.save();
                RollerFactory.getRoller().commit();

                mLogger.debug("Populating form");
                wf.copyFrom(entry, request.getLocale());
                               
                request.setAttribute(
                        RollerRequest.WEBLOGENTRYID_KEY, entry.getId());
                 
                // Reindex entry, flush caches, etc.
                reindexEntry(RollerFactory.getRoller(), entry);
                mLogger.debug("Removing from cache");
                PageCacheFilter.removeFromCache(request, 
                   RollerSession.getRollerSession(request).getCurrentWebsite());
                MainPageAction.flushMainPageCache();

                // Clean up session objects we used
                HttpSession session = request.getSession(true);
                session.removeAttribute("spellCheckEvents");
                session.removeAttribute("entryText");
                
                // Load up request with data for view
                request.setAttribute("model",
                        new WeblogEntryPageModel(request, response, mapping,
                                (WeblogEntryFormEx)actionForm,
                                WeblogEntryPageModel.EDIT_MODE));
                
                if (!rses.isUserAuthorizedToAuthor() && 
                        rses.isUserAuthorized() && entry.isPending())
                {
                    // implies that entry just changed to pending
                    notifyWebsiteAuthorsOfPendingEntry(request, entry);
                    uiMessages.add(null,
                        new ActionMessage("weblogEdit.submitedForReview")); 
                    
                    // so clear entry from editor
                    actionForm = new WeblogEntryFormEx();
                    request.setAttribute(mapping.getName(), actionForm);
                    forward = create(mapping, actionForm, request, response);
                }
                else 
                {
                    uiMessages.add(null, 
                        new ActionMessage("weblogEdit.changesSaved"));
                }
                saveMessages(request, uiMessages);               
                mLogger.debug("operation complete");
            }
            else
            {
                forward = mapping.findForward("access-denied");
            }
        }
        catch (RollerPermissionsException e)
        {
            ActionErrors errors = new ActionErrors();
            errors.add(null, new ActionError("error.permissions.deniedSave"));
            saveErrors(request, errors);
            forward = mapping.findForward("access-denied");
        }
        catch (Exception e)
        {
            throw new ServletException(e);
        }
        return forward;
    }

