    //-----------------------------------------------------------------------
    /**
     * Saves weblog entry and flushes page cache so that new entry will appear 
     * on users weblog page.
     */
    public ActionForward save(
        ActionMapping       mapping,
        ActionForm          actionForm,
        HttpServletRequest  request,
        HttpServletResponse response)
        throws IOException, ServletException
    {
        ActionForward forward = mapping.findForward("weblogEdit.page");
        ActionMessages uiMessages = new ActionMessages();
        try
        {
            RollerRequest rreq = RollerRequest.getRollerRequest(request);
            if ( rreq.isUserAuthorizedToEdit() )
            {
                UserManager userMgr = rreq.getRoller().getUserManager();
                WeblogManager weblogMgr = rreq.getRoller().getWeblogManager();

                WebsiteData site = rreq.getWebsite();
                WeblogEntryFormEx wf = (WeblogEntryFormEx)actionForm;
                
                // I was getting column 'x' cannot be null, so I fixed it here.
                // A better solution might be to change the table so it allows
                // nulls for these columns.
                if (wf.getAllowComments() == null)
                {
                	wf.setAllowComments(Boolean.FALSE);
                }
                if (wf.getRightToLeft() == null)
                {
                    wf.setRightToLeft(Boolean.FALSE);
                }
                if (wf.getPinnedToMain() == null)
                {
                    wf.setPinnedToMain(Boolean.FALSE);
                }
                if (wf.getPublishEntry() == null)
                {
                    wf.setPublishEntry(Boolean.FALSE);
                }
               
                WeblogEntryData entry = null;
                if (wf.getId() == null || wf.getId().trim().length()==0) 
                {
                    entry = new WeblogEntryData();  
                    entry.setWebsite( site );
                }
                else 
                {
                    entry = weblogMgr.retrieveWeblogEntry(wf.getId());
                    entry.save(); // should throw if save not permitted
                }
                wf.copyTo(entry, request.getLocale(), request.getParameterMap());

                // Fetch MediaCast content type and length
                mLogger.debug("Checking MediaCast attributes");
                if (!checkMediaCast(entry)) 
                {
                   mLogger.debug("Invalid MediaCast attributes");
                   uiMessages.add(null, 
                     new ActionMessage("weblogEdit.message.mediaCastProblem"));
                }
                else if (mLogger.isDebugEnabled()) 
                {
                   mLogger.debug("Invalid MediaCast attributes");
                }
                
                // Store value object (creates new or updates existing)
                entry.setUpdateTime(new Timestamp(new Date().getTime()));
                mLogger.debug("Saving entry");
                entry.save();
                rreq.getRoller().commit();

                mLogger.debug("Populating form");
                wf.copyFrom(entry, request.getLocale());
                
                reindexEntry(rreq.getRoller(), entry);
                
                // open up a new session, because we will forward to the edit action
                //rreq.getRoller().begin(); // begin already called by RequestFilter
                
                request.setAttribute(RollerRequest.WEBLOGENTRYID_KEY, entry.getId());
                 
                // Flush the page cache
                mLogger.debug("Removing from cache");
                PageCacheFilter.removeFromCache(request, rreq.getWebsite());
				// refresh the front page cache
                MainPageAction.flushMainPageCache();

                // remove session objects that may be left over from spellchecking
                HttpSession session = request.getSession(true);
                session.removeAttribute("spellCheckEvents");
                session.removeAttribute("entryText");

                request.setAttribute("model",
                        new WeblogEntryPageModel(request, response, mapping,
                                (WeblogEntryFormEx)actionForm,
                                WeblogEntryPageModel.EDIT_MODE));
                
                uiMessages.add(null, new ActionMessage("weblogEdit.changesSaved"));
                saveMessages(request, uiMessages);
                
                mLogger.debug("operation complete");
            }
            else
            {
                forward = mapping.findForward("access-denied");
            }
        }
        catch (RollerPermissionsException e)
        {
            ActionErrors errors = new ActionErrors();
            errors.add(null, new ActionError("error.permissions.deniedSave"));
            saveErrors(request, errors);
            forward = mapping.findForward("access-denied");
        }
        catch (Exception e)
        {
            throw new ServletException(e);
        }
        return forward;
    }

