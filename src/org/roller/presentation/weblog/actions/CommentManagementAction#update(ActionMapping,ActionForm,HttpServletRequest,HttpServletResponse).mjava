    public ActionForward update(
            ActionMapping       mapping,
            ActionForm          actionForm,
            HttpServletRequest  request,
            HttpServletResponse response) 
            throws IOException, ServletException, RollerException {
        
        CommentManagementForm queryForm = (CommentManagementForm)actionForm;
        RollerRequest rreq = RollerRequest.getRollerRequest(request);
        if (rreq.getWeblogEntry() != null) {
            queryForm.setEntryid(rreq.getWeblogEntry().getId());
            queryForm.setWeblog(rreq.getWeblogEntry().getWebsite().getHandle());
        }        
        else if (rreq.getWebsite() != null) {
            queryForm.setWeblog(rreq.getWebsite().getHandle());
        }    
        RollerSession rses = RollerSession.getRollerSession(request);
        try {
            if (rses.isGlobalAdminUser() 
                || (rreq.getWebsite()!=null && rses.isUserAuthorizedToAuthor(rreq.getWebsite())) ) { 
                WeblogManager mgr= RollerFactory.getRoller().getWeblogManager();
                
                // delete all comments with delete box checked
                String[] deleteIds = queryForm.getDeleteComments();
                List deletedList = Arrays.asList(deleteIds); 
                if (deleteIds != null && deleteIds.length > 0) {
                    mgr.removeComments(deleteIds);
                }    
                // loop through all comments displayed on page
                String[] ids = Utilities.stringToStringArray(queryForm.getIds(),",");
                for (int i=0; i<ids.length; i++) { 
                    if (deletedList.contains(ids[i])) continue;
                    CommentData comment = mgr.retrieveComment(ids[i]);
                    List spamIds = Arrays.asList(queryForm.getSpamComments());
                    List approvedIds = Arrays.asList(queryForm.getApprovedComments());
                    if (spamIds.contains(ids[i])) {
                        comment.setSpam(Boolean.TRUE);
                    } else {
                        comment.setSpam(Boolean.FALSE);
                    }
                    
                    // Only change pending status in website specific view, because
                    // we don't want global admins changing pending status of posts.
                    if (rreq.getWebsite() != null) {
                        // all comments reviewed, so they're no longer pending
                        comment.setPending(Boolean.FALSE);
                    }
                    comment.save();
                }               
                RollerFactory.getRoller().commit();
                ActionMessages msgs = new ActionMessages();
                msgs.add(ActionMessages.GLOBAL_MESSAGE, 
                    new ActionMessage("commentManagement.updateSuccess"));
                saveMessages(request, msgs);
            }
        } catch (Exception e) {
            ActionMessages errors = new ActionMessages();
            errors.add(ActionErrors.GLOBAL_MESSAGE,
                new ActionMessage("commentManagement.updateError", e.toString()));
            saveErrors(request, errors);
            logger.error("ERROR updating comments", e);       
        }
        CommentManagementPageModel model = new CommentManagementPageModel(
           "commentManagement.title", request, response, mapping, queryForm);
        request.setAttribute("model", model); 
        if (request.getAttribute("commentManagementForm") == null) {
            request.setAttribute("commentManagementForm", actionForm);
        }
        
        if (rreq.getWebsite() != null) {
            return mapping.findForward("commentManagement.page");
        }
        return mapping.findForward("commentManagementGlobal.page");
    }

