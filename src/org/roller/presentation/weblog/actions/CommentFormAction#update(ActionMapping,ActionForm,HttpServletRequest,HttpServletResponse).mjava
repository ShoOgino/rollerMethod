    //-----------------------------------------------------------------------
    /**
     * Saves comment and forward to the comment-edit page.
     */
    public ActionForward update(
        ActionMapping       mapping,
        ActionForm          actionForm,
        HttpServletRequest  request,
        HttpServletResponse response)
        throws IOException, ServletException
    {
        ActionForward forward = null; // we'll compute this later

        RollerRequest rreq = RollerRequest.getRollerRequest(request);
        ActionErrors errors = new ActionErrors();

        try
        {
            // Get weblog entry object, put in page context
            WeblogEntryData wd = rreq.getWeblogEntry();
            if (wd == null || wd.getId() == null)
            {
                throw new NullPointerException(
                    "Unable to find WeblogEntry for "+
                    request.getParameter(RollerRequest.WEBLOGENTRYID_KEY));
            }
            if ( !wd.getWebsite().getAllowComments().booleanValue() ) {
                throw new ServletException("ERROR comments disabled by user");
            }
            request.setAttribute("blogEntry", wd);

            // get the User to which the blog belongs
            UserData user = rreq.getUser();

            // Save comment
            WeblogManager mgr = rreq.getRoller().getWeblogManager();
            CommentFormEx cf = (CommentFormEx)actionForm;
            CommentData cd = new CommentData();
            cf.copyTo(cd, request.getLocale());
            cd.setWeblogEntry(wd);
            cd.setRemoteHost(request.getRemoteHost());

            cd.setPostTime(new java.sql.Timestamp( System.currentTimeMillis()));
            if (cd.getSpam() == null) 
            {
            	cd.setSpam(Boolean.FALSE);
            }
            cd.save();
            rreq.getRoller().commit();

            // check for spam
            testCommentSpam(cd, request);
            if (cd.getSpam().booleanValue())
            {
                errors.add(ActionErrors.GLOBAL_ERROR,
                           new ActionError("error.update.comment", COMMENT_SPAM_MSG));
                saveErrors(request,errors);                
            }
            else
            {
                reindexEntry(wd);
            }

			// Refresh user's entries in page cache
			PageCache.removeFromCache( request, user );

			// Put array of comments in context
			List comments = mgr.getComments( wd.getId() );
			request.setAttribute("blogComments", comments);

			// Remove the obsolete form bean
			request.removeAttribute(mapping.getAttribute());

			// MR: Added functionality to e-mail comments
            sendEmailNotification(request, rreq, wd, cd, user, comments);

            if ( request.getAttribute("updateFromPage")!=null )
            {
                forward = updateFromPageForward(request, rreq, wd, user);
            }
            else
            {
                forward = mapping.findForward("comment.page");
            }

            // Put array of comments in context
            loadComments(request, wd.getId(), mgr, true); // no spam

            cf.reset(mapping,request);
        }
        catch (Exception e)
        {
            forward = mapping.findForward("error");

            errors.add(ActionErrors.GLOBAL_ERROR,
                new ActionError("error.update.comment", e.toString()));
            saveErrors(request,errors);

            mLogger.error(getResources(request)
                .getMessage("error.update.comment") + e.toString(),e);
        }
        return forward;
    }

