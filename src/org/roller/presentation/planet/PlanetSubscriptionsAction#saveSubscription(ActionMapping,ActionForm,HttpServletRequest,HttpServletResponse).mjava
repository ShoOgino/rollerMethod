    /** Save subscription, add to current group */
    public ActionForward saveSubscription(ActionMapping mapping,
            ActionForm actionForm, HttpServletRequest request,
            HttpServletResponse response) throws IOException, ServletException {
        ActionForward forward = mapping.findForward("planetSubscriptions.page");
        try {
            Roller roller = RollerFactory.getRoller();
            PlanetManager planet = roller.getPlanetManager();
            PlanetSubscriptionFormEx form = (PlanetSubscriptionFormEx)actionForm;
            
            String groupHandle = request.getParameter("groupHandle");
            groupHandle = (groupHandle == null) ? form.getGroupHandle() : groupHandle;
            groupHandle = (groupHandle == null) ? "external" : groupHandle;
            
            PlanetGroupData targetGroup = planet.getGroup(groupHandle);
            
            if (RollerSession.getRollerSession(request).isGlobalAdminUser()) {
                
                PlanetSubscriptionData sub = null;
                ActionErrors errors = validate(planet, form);
                if (errors.isEmpty()) {
                    if (form.getId() == null || form.getId().trim().length() == 0) {                        
                        // User adding new subscription to group.                        
                        // Does form specify a subscription that already exists?
                        if (form.getFeedUrl() != null) {
                            sub = planet.getSubscription(form.getFeedUrl());                           
                        }
                        // If not, then create a new one
                        if (sub == null) {
                            sub = new PlanetSubscriptionData();   
                        }
                        // And add it to the group
                        targetGroup.addSubscription(sub);
                        
                    } else {
                        // User editing an existing subscription within a group
                        sub = planet.getSubscriptionById(form.getId());
                        form.copyTo(sub, request.getLocale());                        
                    }                    
                    form.setGroupHandle(groupHandle);
                    planet.saveSubscription(sub);
                    planet.saveGroup(targetGroup);
                    roller.commit();
                    
                    ActionMessages messages = new ActionMessages();
                    messages.add(null,
                            new ActionMessage("planetSubscription.success.saved"));
                    saveMessages(request, messages);
                    form.doReset(mapping, request);
                } else {
                    saveErrors(request, errors);
                }
            } else {
                forward = mapping.findForward("access-denied");
            }
            request.setAttribute("model",
                    new SubscriptionsPageModel(
                    targetGroup, request, response, mapping, form));
        } catch (RollerException e) {
            ActionErrors errors = new ActionErrors();
            errors.add(null, new ActionError(
                    "planetSubscriptions.error.duringSave",e.getRootCauseMessage()));
            saveErrors(request, errors);
        }
        return forward;
    }

