    /**     * Returns a Channel object for the supplied RSS newsfeed URL.     *      * @param feedUrl     *            RSS newsfeed URL.     * @return FlockFeedI for specified RSS newsfeed URL.     */    public SyndFeed getChannel(String feedUrl)    {        SyndFeed feed = null;        try        {            // If aggregator has been disable return null            if (!aggregator_enabled)            {                return null;            }            if (aggregator_cache_enabled)            {                if (mLogger.isDebugEnabled())                {                    mLogger.debug("Newsfeed: use Cache for " + feedUrl);                }                // Get pre-parsed feed from the cache                feed = (SyndFeed) mCache.get(feedUrl);                if (mLogger.isDebugEnabled())                {                    mLogger.debug("Newsfeed: got from Cache");                }                if (feed == null)                {                    try                    {                        // Parse the feed                        SyndFeedInput feedInput = new SyndFeedInput();                        feed = feedInput.build(new InputStreamReader(                                new URL(feedUrl).openStream()));                    }                    catch (Exception e1)                    {                        mLogger.info("Error parsing RSS: " + feedUrl);                    }                }                // Store parsed feed in the cache                mCache.put(feedUrl, feed);                mLogger.debug("Newsfeed: not in Cache");            }            else            {                if (mLogger.isDebugEnabled())                {                    mLogger.debug("Newsfeed: not using Cache for " + feedUrl);                }                try                {                    // Parse the feed                    SyndFeedInput feedInput = new SyndFeedInput();                    feed = feedInput.build(new InputStreamReader(                            new URL(feedUrl).openStream()));                }                catch (Exception e1)                {                    mLogger.info("Error parsing RSS: " + feedUrl);                }            }        }        catch (Exception ioe)        {            if (mLogger.isDebugEnabled())            {                mLogger.debug("Newsfeed: Unexpected exception", ioe);            }        }        return feed;    }
