    //-----------------------------------------------------------------------
    public ActionForward edit(
        ActionMapping       mapping,
        ActionForm          actionForm,
        HttpServletRequest  request,
        HttpServletResponse response)
        throws IOException, ServletException
    {
        ActionForward forward = mapping.findForward("adminUser.page");
        ActionMessages warnings = new ActionMessages();
        try
        {
            RollerRequest rreq = RollerRequest.getRollerRequest(request);
            if ( rreq.isUserAuthorizedToEdit() && rreq.isAdminUser() )
            {
                UserManager mgr = rreq.getRoller().getUserManager();

                List users = mgr.getUsers(false);
                request.setAttribute("users", users);

                UserAdminForm uaf = (UserAdminForm)actionForm;
                if (uaf != null && uaf.getUserName() != null)
                {
                    UserData ud = mgr.getUser( uaf.getUserName(), false );
                    
                    if ( ud != null)
                    {
                        uaf.copyFrom(ud, request.getLocale());
                        
                        WebsiteData website = mgr.getWebsite(uaf.getUserName(), false);
                        uaf.setUserEnabled( website.getIsEnabled() );
                        PageCache.removeFromCache( request,ud );
                    }
                    else
                    {
                        warnings.add(ActionMessages.GLOBAL_MESSAGE,
                            new ActionMessage("Unable to find user: " + uaf.getUserName()));

                        uaf.setUserName("");
                    }
                }
            }
            else
            {
                forward = mapping.findForward("access-denied");
            }
        }
        catch (Exception e)
        {
            mLogger.error("ERROR in action",e);
            throw new ServletException(e);
        }
        
        // if user logged in with a cookie, display a warning that they
        // can't change passwords
        if (mLogger.isDebugEnabled()) 
        {
            log.debug("checking for cookieLogin...");
        }

        if (request.getSession().getAttribute("cookieLogin") != null) {
            // add warning messages
            warnings.add(ActionMessages.GLOBAL_MESSAGE,
                         new ActionMessage("userAdmin.cookieLogin"));
        }
        
        if (!warnings.isEmpty()) 
        {
            saveMessages(request, warnings);
        }
        
        return forward;
    }

