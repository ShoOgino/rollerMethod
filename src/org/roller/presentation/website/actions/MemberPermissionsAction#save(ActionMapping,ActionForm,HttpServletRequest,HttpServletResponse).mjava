    public ActionForward save(
            ActionMapping       mapping,
            ActionForm          actionForm,
            HttpServletRequest  request,
            HttpServletResponse response)
            throws Exception
    {
        ActionErrors errors = new ActionErrors();
        ActionMessages msgs = new ActionMessages();
        
        MemberPermissionsPageModel model = 
            new MemberPermissionsPageModel(request, response, mapping);
        
        Iterator iter = model.getPermissions().iterator();
        int removed = 0;
        int changed = 0;
        while (iter.hasNext())
        {
            PermissionsData perms = (PermissionsData)iter.next();
            String sval = request.getParameter("perm-" + perms.getId());
            if (sval != null)
            {
                short val = Short.parseShort(sval);
                RollerSession rses = RollerSession.getRollerSession(request);
                UserData user = rses.getAuthenticatedUser();
                if (perms.getUser().getId().equals(user.getId()) 
                        && val < perms.getPermissionMask())
                {
                    errors.add(null,new ActionError(
                        "memberPermissions.noSelfDemotions"));
                }
                else if (val != perms.getPermissionMask()) 
                {
                    if (val == -1) 
                    {
                        perms.remove();
                        removed++;
                    }
                    else
                    {
                        perms.setPermissionMask(val);
                        changed++;
                    }
                }
            }
        }
        if (removed > 0 || changed > 0)
        {
            RollerFactory.getRoller().commit();  
        }
        if (removed > 0) 
        {
            msgs.add(null,new ActionMessage(
                "memberPermissions.membersRemoved", new Integer(removed)));
        }
        if (changed > 0)
        {
            msgs.add(null,new ActionMessage(
                "memberPermissions.membersChanged", new Integer(changed)));
        }
        saveErrors(request, errors);
        saveMessages(request, msgs);
        MemberPermissionsPageModel updatedModel = 
            new MemberPermissionsPageModel(request, response, mapping);
        request.setAttribute("model", updatedModel);
        ActionForward forward = mapping.findForward("memberPermissions.page");
        return forward;
    }

