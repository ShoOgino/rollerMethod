    public ActionForward send(
            ActionMapping       mapping,
            ActionForm          actionForm,
            HttpServletRequest  request,
            HttpServletResponse response)
            throws Exception
    {
        // if group blogging is disabled then you can't change permissions
        if (!RollerConfig.getBooleanProperty("groupblogging.enabled")) {
            return mapping.findForward("access-denied");
        }
        
        ActionForward forward = mapping.findForward("inviteMember.page");
        ActionMessages msgs = new ActionMessages();
        ActionMessages errors = new ActionErrors();
        InviteMemberForm form = (InviteMemberForm)actionForm;
        UserManager umgr = RollerFactory.getRoller().getUserManager();
        UserData user = umgr.getUser(form.getUserName());
        
        if (user == null)
        {
            errors.add(ActionErrors.GLOBAL_ERROR, 
                new ActionError("inviteMember.error.userNotFound"));
        }
        else 
        {
            RollerRequest rreq = RollerRequest.getRollerRequest(request);
            WebsiteData website = rreq.getWebsite();
            PermissionsData perms = umgr.getPermissions(website, user);
            if (perms != null && perms.isPending())
            {
                errors.add(ActionErrors.GLOBAL_ERROR, 
                    new ActionError("inviteMember.error.userAlreadyInvited"));
                request.setAttribute("model", new BasePageModel(
                    "inviteMember.title", request, response, mapping));
            }
            else if (perms != null)
            {
                errors.add(ActionErrors.GLOBAL_ERROR, 
                    new ActionError("inviteMember.error.userAlreadyMember"));
                request.setAttribute("model", new BasePageModel(
                    "inviteMember.title", request, response, mapping));
            }
            else
            {
                String mask = request.getParameter("permissionsMask");
                umgr.inviteUser(website, user, Short.parseShort(mask));
                request.setAttribute("user", user);
                try 
                {
                    notifyInvitee(request, website, user);
                }
                catch (RollerException e)
                {
                    errors.add(ActionErrors.GLOBAL_ERROR, 
                        new ActionError("error.untranslated", e.getMessage()));                
                }               
                msgs.add(ActionMessages.GLOBAL_MESSAGE, 
                    new ActionMessage("inviteMember.userInvited"));
                
                request.setAttribute("model", new BasePageModel(
                    "inviteMemberDone.title", request, response, mapping));
                
                forward = mapping.findForward("memberPermissions");                
            }
        }
        saveErrors(request, errors);
        saveMessages(request, msgs);
        return forward; 
    }

