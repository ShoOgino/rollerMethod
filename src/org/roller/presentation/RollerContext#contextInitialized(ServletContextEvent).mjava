    /**
     * Responds to context initialization event by processing context
     * paramters for easy access by the rest of the application.
     */
    public void contextInitialized(ServletContextEvent sce) {
        
        mLogger.debug("RollerContext initializing");
        
        // Save context in self and self in context
        mContext = sce.getServletContext();
        mContext.setAttribute(ROLLER_CONTEXT, this);
        
        // get the *real* path to <context>/resources
        String ctxPath = mContext.getRealPath("/");
        if(!ctxPath.endsWith(File.separator))
            ctxPath += File.separator + "resources";
        else
            ctxPath += "resources";
        
        // try setting the uploads path to <context>/resources
        // NOTE: this should go away at some point
        // we leave it here for now to allow users to keep writing
        // uploads into their webapp context, but this is a bad idea
        //
        // also, the RollerConfig.setUploadsDir() method is smart
        // enough to disregard this call unless the uploads.path
        // is set to ${webapp.context}
        RollerConfig.setUploadsDir(ctxPath);
        
        // set the roller context real path in RollerConfig
        // NOTE: it seems that a few backend classes do actually need
        //       to know what the real path to the roller context is,
        //       so we set this property to give them the info they need.
        //
        //       this is really not a best practice and we should try to
        //       remove these dependencies on the webapp context if possible
        RollerConfig.setContextRealPath(mContext.getRealPath("/"));
        
        try {
            // always upgrade database first
            upgradeDatabaseIfNeeded();
            
            Roller roller = RollerFactory.getRoller();
            
            setupRollerProperties();
            
            // call Spring's context ContextLoaderListener to initialize
            // all the context files specified in web.xml. This is necessary
            // because listeners don't initialize in the order specified in
            // 2.3 containers
            super.contextInitialized(sce);
            
            initializeSecurityFeatures(mContext);
            
            roller.getThemeManager();
            setupIndexManager(roller);
            initializePingFeatures(roller);
            setupPingQueueTask(roller);
            setupScheduledTasks(mContext, roller);
            
            roller.flush();
            roller.release();
            
        } catch (Throwable t) {
            mLogger.fatal("RollerContext initialization failed", t);
        }
        
        mLogger.debug("RollerContext initialization complete");
    }

