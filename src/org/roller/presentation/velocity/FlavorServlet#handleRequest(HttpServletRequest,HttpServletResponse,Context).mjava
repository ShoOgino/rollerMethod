    public Template handleRequest(HttpServletRequest request,
            HttpServletResponse response, Context ctx) {
        
        RollerRequest rreq = null;
        
        try {
            rreq = RollerRequest.getRollerRequest(request,getServletContext());
            
            // This is an ugly hack to fix the following bug:
            // ROL-547: "Site wide RSS feed is your own if you are logged in"
            String[] pathInfo = StringUtils.split(rreq.getPathInfo(),"/");
            if (pathInfo.length < 1) {
                // If website not specified in URL, set it to null
                rreq.setWebsite(null);
            }
        } catch (RollerException e) {
            // An error initializing the request is considered to be a 404
            if (mLogger.isDebugEnabled()) {
                mLogger.debug("RollerRequest threw Exception", e);
            }
            try {
                response.sendError(HttpServletResponse.SC_NOT_FOUND);
            } catch (IOException e1) {
                if (mLogger.isDebugEnabled()) {
                    mLogger.debug("IOException sending error", e);
                }
            }
            return null;
        }
        
        try {
            // Needed to init request attributes, etc.
            PageContext pageContext =
                    JspFactory.getDefaultFactory().getPageContext(
                    this, request,  response, "", true, 8192, true);
            rreq.setPageContext(pageContext);
            
            // get update time before loading context
            // TODO: this should really be handled elsewhere
            if(rreq.getWebsite() != null) {
                String catname =
                        request.getParameter(RollerRequest.WEBLOGCATEGORYNAME_KEY);
                
                Roller roller = RollerFactory.getRoller();
                UserManager umgr = roller.getUserManager();
                WeblogManager wmgr = roller.getWeblogManager();
                
                Date updateTime = wmgr.getWeblogLastPublishTime(
                        umgr.getWebsiteByHandle(rreq.getWebsite().getHandle()), catname);
                
                request.setAttribute("updateTime", updateTime);
            }
            
            ContextLoader.setupContext(ctx, rreq, response);
            
            final String useTemplate;
            PageModel pageModel = (PageModel)ctx.get("pageModel");
            if (request.getServletPath().endsWith("rss")) {
                if (pageModel.getPageByName("_rss") != null)
                    // If the request specified the "/rss" mapping and the
                    // user has defined an RSS override page, we will use that.
                    useTemplate = pageModel.getPageByName("_rss").getId();
                else
                    useTemplate = "/flavors/rss.vm";
            } else if (request.getServletPath().endsWith("atom")) {
                if (pageModel.getPageByName("_atom") != null)
                    // If the request specified the "/atom" mapping and the
                    // user has defined an Atom override page, we will use that.
                    useTemplate = pageModel.getPageByName("_atom").getId();
                else
                    useTemplate = "/flavors/atom.vm";
            } else if (request.getParameter("flavor") != null) {
                // If request specifies a "flavor" then use that.
                String flavor = request.getParameter("flavor");
                useTemplate = "/flavors/" + flavor + ".vm";
            } else {
                // Fall through to default RSS page template.
                useTemplate = "/flavors/rss.vm";
            }
            
            return getTemplate(useTemplate);
        } catch (Exception e) {
            mLogger.error("ERROR in RssServlet", e);
        }
        
        return null;
    }

