    public Template handleRequest(HttpServletRequest request,
                        HttpServletResponse response, Context ctx) throws Exception
    {
        // Note: Removed request character encoding here; was too late; it is now set uniformly in CharEncodingFilter.
        // See ROL-760.

        String enabled = RollerConfig.getProperty("search.enabled");
        if("false".equalsIgnoreCase(enabled))
            this.searchEnabled = false;
        
        if(! this.searchEnabled) {
            Template outty = null;
            Exception pageException = null;
            try {
                ContextLoader.setupContext(
                        ctx, RollerRequest.getRollerRequest(request), response );
                outty = getTemplate( "searchdisabled.vm", "UTF-8" );
            } catch (Exception e) {
                pageException = e;
                response.setStatus( HttpServletResponse.SC_INTERNAL_SERVER_ERROR );
            }
            
            if (pageException != null) {
                mLogger.error("EXCEPTION: in RollerServlet", pageException);
                request.setAttribute("DisplayException", pageException);
            }
            return outty;
        }

        ctx.put("term", "");
        ctx.put("hits", new Integer(0));
        ctx.put("searchResults", new TreeMap());          
        // to enable better unit testing
        request.setAttribute("zzz_VelocityContext_zzz", ctx);
        
        mLogger.debug("q = "+request.getParameter("q"));
        
        // do no work if query term is empty
        if (StringUtils.isEmpty(request.getParameter("q")))
        {  
            return generalSearchResults(request, response, ctx);        
        }

        boolean userSpecificSearch = checkForUser(request);
        try
        {
            RollerRequest rreq = getRollerRequest(request, response);
            
            SearchOperation search = 
                new SearchOperation(rreq.getRoller().getIndexManager());
            search.setTerm(request.getParameter("q"));
            ctx.put("term", request.getParameter("q"));

            WebsiteData website = null;
            if (userSpecificSearch)
            {    
                website = rreq.getWebsite();
                search.setUsername(rreq.getUser().getUserName());
                ctx.put("username", rreq.getUser().getUserName());
            }
            
            if (StringUtils.isNotEmpty(request.getParameter("c")))
            {
                search.setCategory(request.getParameter("c"));
            }

            // execute search
            executeSearch(rreq.getRoller(), search);

            Map searchResults = new TreeMap();
            if (search.getResultsCount() == -1)
            {
                // this means there has been a parsing (or IO) error
                //ctx.put("errorMessage", search.getParseError());
                ctx.put("errorMessage", "There was a problem with your search.");
            }
            else
            {    
                // Convert the Hits into WeblogEntryData instances.
                Hits hits = search.getResults();
                searchResults = convertHitsToEntries(rreq, website, hits);
                ctx.put("offset", request.getAttribute("offset"));
                ctx.put("limit", request.getAttribute("limit"));
                
                if (request.getAttribute("categories") != null)
                {
                    Set cats = (Set)request.getAttribute("categories");
                    if (cats.size() > 0)
                    {
                        ctx.put("categories", cats);
                    }
                }
            }
            ctx.put("searchResults", searchResults);
            ctx.put("hits", new Integer(search.getResultsCount()));      
        }
        catch (Exception e)
        {
            mLogger.error("EXCEPTION: in SearchServlet", e);
            request.setAttribute("DisplayException", e);
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
        }        

        if (userSpecificSearch)   
        {    
            return super.handleRequest(request, response, ctx);
        }

        return generalSearchResults(request, response, ctx);
    }

