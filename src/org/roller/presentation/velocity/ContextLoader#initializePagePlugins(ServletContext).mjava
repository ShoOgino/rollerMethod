    /**
     * Initialize PagePlugins declared in web.xml, called once by RollerContext.
     * By using the full class name we also allow for the implementation of 
     * "external" Plugins (maybe even packaged seperately). These classes are 
     * then later instantiated by PageHelper.
     */
    public static void initializePagePlugins(ServletContext mContext)
    {
        mLogger.debug("Initializing page plugins");
        
        String pluginStr = RollerConfig.getProperty("plugins.page");
        if (mLogger.isDebugEnabled()) mLogger.debug(pluginStr);
        if (pluginStr != null)
        {
            String[] plugins = StringUtils.stripAll(
                                   StringUtils.split(pluginStr, ",") );
            for (int i=0; i<plugins.length; i++)
            {
                if (mLogger.isDebugEnabled()) mLogger.debug("try " + plugins[i]);
                try
                {
                    Class pluginClass = Class.forName(plugins[i]);
                    if (isPagePlugin(pluginClass))
                    {
                        PagePlugin plugin = (PagePlugin)pluginClass.newInstance();
                        mPagePlugins.put(plugin.getName(), pluginClass);
                    }
                    else
                    {
                        mLogger.warn(pluginClass + " is not a PagePlugin");
                    }
                } 
                catch (ClassNotFoundException e)
                {
                    mLogger.error("ClassNotFoundException for " + plugins[i]);
                }
                catch (InstantiationException e)
                {
                    mLogger.error("InstantiationException for " + plugins[i]);
                }
                catch (IllegalAccessException e)
                {
                    mLogger.error("IllegalAccessException for " + plugins[i]);
                }
            }
        }
    }

