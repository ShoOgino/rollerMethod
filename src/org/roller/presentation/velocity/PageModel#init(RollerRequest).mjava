    /**
     * Initialize PageModel and allow PageModel to initialized VelocityContext.
     * @param rreq
     * @param ctx
     */
    public void init(RollerRequest rreq)
    {
        mRollerReq = rreq;
        if ( rreq.getRequest().getAttribute(RollerRequest.OWNING_WEBSITE) != null)
        {
            mWebsite = (WebsiteData)
                rreq.getRequest().getAttribute(RollerRequest.OWNING_WEBSITE);
            mHandle = mWebsite.getHandle();
        }
        else if ( rreq.getWebsite() != null )
        {
            mWebsite = rreq.getWebsite();
            mHandle = mWebsite.getHandle();
        }
        
        try
        {
            mBookmarkMgr = rreq.getRoller().getBookmarkManager();
            mRefererMgr  = rreq.getRoller().getRefererManager();
            mUserMgr     = rreq.getRoller().getUserManager();
            mWeblogMgr   = rreq.getRoller().getWeblogManager();
           
            // Preload what we can for encapsulation.  What we cannot preload we
            // will use the Managers later to fetch.

            // Get the pages, put into context & load map
            if (mWebsite != null)
            {
                List pages = mUserMgr.getPages(mWebsite);
                Iterator pageIter = pages.iterator();
                while (pageIter.hasNext())
                {
                    PageData page = (PageData) pageIter.next();
                    mPageMap.put(page.getName(), page); 
                }
            }
        }
        catch (RollerException e)
        {
            mLogger.error("PageModel Roller get*Manager Exception", e);
        }
    }

