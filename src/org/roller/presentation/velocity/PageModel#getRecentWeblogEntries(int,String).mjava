    /**
     * Returns a map of up to 100 recent weblog entries for the user and day
     * specified in the request, filtered by the category specified by the
     * request, limited by the 'maxEntries' argument, and sorted by reverse
     * chronological order.
     *
     * <p>This method will look for a category name in the following places
     * and in the following order:</p>
     * <ul>
     * <li>The request via RollerRequest.getWeblogCategory().</li>
     * <li>The categoryName argument to this method.</li>
     * <li>The default category for the website specified by the request via
     *     RollerRequest.getWebsite().getDefaultCategory().</li>
     * <li></li>
     * </ul>
     *
     * @param maxEntries Maximum number of entries to be returned (only applies 
     *                   if specific day not specified).
     * @param catName    Only return entries from this category and it's
     *                   subcategories. If null, returns all categories of entry
     * @return           Map of Lists of WeblogEntryData, keyed by 8-char date 
     *                   strings.
     */
    public Map getRecentWeblogEntries(int maxEntries, String catName) {
        if (VELOCITY_NULL.equals(catName)) catName = null;
        Map ret = new HashMap();
        try {            
            // If request specifies a category, then use that
            String catParam = null;
            if (mRollerReq.getWeblogCategory() != null) {
                catParam = mRollerReq.getWeblogCategory().getPath();
            } else if (catName != null) {
                // use category argument instead
                catParam = catName;
            } else if (mRollerReq.getWebsite() != null) // MAIN
            {
                catParam = mRollerReq.getWebsite().getDefaultCategory().getPath();
                if (catParam.equals("/")) {
                    catParam = null;
                }
            }
            
            Integer limit = new Integer(maxEntries);
            Date startDate = null;
            Date endDate = mRollerReq.getDate();
            if (endDate == null) endDate = new Date();
            if (mRollerReq.isDaySpecified()) { 
                // URL specified a specific day
                // so get entries for that day
                endDate = DateUtil.getEndOfDay(endDate);
                startDate = DateUtil.getStartOfDay(endDate); 
                // and get them ALL, no limit
                limit = null;                  
            } else if (mRollerReq.isMonthSpecified()) {
                endDate = DateUtil.getEndOfDay(endDate);
            }
            Map mRet = RollerFactory.getRoller().getWeblogManager().getWeblogEntryObjectMap(
                    mRollerReq.getWebsite(),
                    startDate,                    // startDate
                    endDate,                      // endDate
                    catParam,                     // catName
                    WeblogEntryData.PUBLISHED,    // status
                    limit);     // maxEntries
            
            // need to wrap pojos
            java.util.Date key = null;
            Iterator days = mRet.keySet().iterator();
            while(days.hasNext()) {
                key = (java.util.Date)days.next();
                
                // now we need to go through each entry in a day and wrap
                List wrappedEntries = new ArrayList();
                List entries = (List) mRet.get(key);
                for(int i=0; i < entries.size(); i++) {
                    wrappedEntries.add(i,
                            WeblogEntryDataWrapper.wrap((WeblogEntryData)entries.get(i)));
                }
                mRet.put(key, wrappedEntries);
            }
            
            ret = mRet;
            
            setFirstAndLastEntries( ret );
        } catch (Exception e) {
            mLogger.error("PageModel getRecentWeblogEntries()", e);
        }
        return ret;
    }

