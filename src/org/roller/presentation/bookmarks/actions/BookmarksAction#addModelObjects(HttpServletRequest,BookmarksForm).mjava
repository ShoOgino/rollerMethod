    /**
     * Load model objects for display in BookmarksForm.
     * @param request
     * @throws RollerException
     */
    private void addModelObjects(HttpServletRequest request, BookmarksForm form)
        throws RollerException
    {
        RollerRequest rreq = RollerRequest.getRollerRequest(request);
        WebsiteData wd = rreq.getWebsite();
        BookmarkManager bmgr = rreq.getRoller().getBookmarkManager();

        TreeSet allFolders = new TreeSet(new Comparator() {
            public int compare(Object o1, Object o2) {
                FolderData f1 = (FolderData)o1;
                FolderData f2 = (FolderData)o2;
                int res = 0;
                try
                {
                    res = f1.getPath().compareTo(f2.getPath());
                }
                catch (RollerException e)
                {
                    mLogger.error("ERROR: sorting folders");
                }
                return res;
            }
        });

        // Find folderid wherever it may be
        String folderId = (String)request.getAttribute(RollerRequest.FOLDERID_KEY);
        if (null == folderId)
        {
            folderId = request.getParameter(RollerRequest.FOLDERID_KEY);
        }
        if (null == folderId)
        {
            folderId = form.getFolderId();
        }

        FolderData folder = null;
        if (null == folderId || folderId.equals("null"))
        {
            folder = bmgr.getRootFolder(wd);
        }
        else
        {
            folder = bmgr.retrieveFolder(folderId);
        }
        form.setFolderId(folder.getId());

        request.setAttribute("folder", folder);
        request.setAttribute("folders", folder.getFolders());
        request.setAttribute("bookmarks", folder.getBookmarks());

        if (null != folder.getParent())
        {
            LinkedList folderPath = new LinkedList();
            folderPath.add(0, folder);
            FolderData parent = folder.getParent();
            while (parent != null)
            {
                folderPath.add(0, parent);
                parent = parent.getParent();
            }
            request.setAttribute("folderPath", folderPath);

            request.setAttribute(
                RollerRequest.PARENTID_KEY, folder.getParent().getId());
        }

        // Build list of all folders, except for current one, sorted by path.
        Iterator iter = bmgr.getAllFolders(wd).iterator();

        // Build list of only children
        //Iterator iter = folder.getFolders().iterator();

        //int max = 20, count = 0;
        while (iter.hasNext()) // && count < max)
        {
            //count++;
            FolderData fd = (FolderData) iter.next();
            if (!fd.getId().equals(folderId))
            {
                allFolders.add(fd);
            }
        }
        request.setAttribute("allFolders", allFolders);
    }

