    /**
     * Filter processing.
     *
     * We check the incoming request for an "if-modified-since" header and
     * repond with a 304 NOT MODIFIED when appropriate.
     */
    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)
            throws IOException, ServletException {
        
        HttpServletRequest request = (HttpServletRequest) req;
        HttpServletResponse response = (HttpServletResponse) res;
        
        PlanetRequest planetRequest = null;
        try {
            planetRequest = new PlanetRequest(request);
        } catch(Exception e) {
            mLogger.error("error creating planet request", e);
            response.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        
        Date updateTime = null;
        try {
            // first try our cached version
            if(this.lastUpdateTime != null) {
                updateTime = (Date) this.lastUpdateTime.getValue();
            }
            
            // we need to get a fresh value
            if(updateTime == null) {
                
                updateTime = RollerFactory.getRoller().getPlanetManager().getLastUpdated();
                if (updateTime == null) {
                    updateTime = new Date();
                    mLogger.warn("Can't get lastUpdate time, using current time instead");
                }
                
                this.lastUpdateTime = new ExpiringCacheEntry(updateTime, this.timeout);
            }
            
            // RSS context loader needs updateTime, so stash it
            request.setAttribute("updateTime", updateTime);
            
            // Check the incoming if-modified-since header
            Date sinceDate =
                    new Date(request.getDateHeader("If-Modified-Since"));
            
            if (updateTime != null) {
                // convert date (JDK 1.5 workaround)
                synchronized (dateFormatter) {
                    String date = dateFormatter.format(updateTime);
                    updateTime = new Date(date);
                }
                if (updateTime.compareTo(sinceDate) <= 0) {
                    response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
                    return;
                }
            }
            
        } catch(RollerException re) {
            // problem talking to db?
            response.sendError(HttpServletResponse.SC_BAD_REQUEST);
            request.setAttribute("DisplayException", re);
            return;
        } catch(IllegalArgumentException e) {
            // Thrown by getDateHeader if not in valid format. This can be
            // safely ignored, the only consequence is that the NOT MODIFIED
            // response is not set.
        }
        
        // Set outgoing last modified header
        if (updateTime != null) {
            response.setDateHeader("Last-Modified", updateTime.getTime());
        }
        
        chain.doFilter(request, response);
    }

