    /**
     * doFilter
     */
    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {
        HttpServletRequest request = (HttpServletRequest) req;
        boolean isRefSpammer = false;
        boolean isRobot = false;

        try {
            if (robotPattern != null) {
                // If the pattern is present, we check for whether the User-Agent matches,
                // and set isRobot if so.  Currently, all referral processing, including
                // spam check, is skipped for robots identified in this way.
                String userAgent = request.getHeader("User-Agent");
                isRobot = (userAgent != null && userAgent.length() > 0 && robotPattern.matcher(userAgent).matches());
            }

            if (!isRobot) {
                RollerRequest rreq = RollerRequest.getRollerRequest(request);
                RollerContext rctx = RollerContext.getRollerContext(mFilterConfig.getServletContext());

                if (rreq != null && rreq.getWebsite() != null) {
                    String handle = rreq.getWebsite().getHandle();

                    // Base page URLs, with and without www.
                    String basePageUrlWWW = rctx.getAbsoluteContextUrl(request) + "/page/" + handle;
                    String basePageUrl = basePageUrlWWW;
                    if (basePageUrlWWW.startsWith("http://www.")) {
                        // chop off the http://www.
                        basePageUrl = "http://" + basePageUrlWWW.substring(11);
                    }

                    // Base comment URLs, with and without www.
                    String baseCommentsUrlWWW = rctx.getAbsoluteContextUrl(request) + "/comments/" + handle;
                    String baseCommentsUrl = baseCommentsUrlWWW;
                    if (baseCommentsUrlWWW.startsWith("http://www.")) {
                        // chop off the http://www.
                        baseCommentsUrl = "http://" + baseCommentsUrlWWW.substring(11);
                    }

                    // Don't process hits from same user's blogs as referers by
                    // ignoring Don't process referer from pages that start with base URLs.
                    String referer = request.getHeader("Referer");
                    if (referer == null || (!referer.startsWith(basePageUrl) && !referer.startsWith(basePageUrlWWW) && !referer.startsWith(baseCommentsUrl) && !referer.startsWith(baseCommentsUrlWWW)))
                    {
                        RefererManager refMgr = RollerFactory.getRoller().getRefererManager();
                        isRefSpammer = refMgr.processRequest(rreq);
                    } else {
                        if (mLogger.isDebugEnabled()) {
                            mLogger.debug("Ignoring referer=" + referer);
                        }
                    }
                }
            }
        } catch (Exception e) {
            mLogger.error("Processing referer", e);
        }

        if (isRefSpammer) {
            HttpServletResponse response = (HttpServletResponse) res;
            response.sendError(HttpServletResponse.SC_FORBIDDEN);
        } else {
            chain.doFilter(req, res);
        }
    }

