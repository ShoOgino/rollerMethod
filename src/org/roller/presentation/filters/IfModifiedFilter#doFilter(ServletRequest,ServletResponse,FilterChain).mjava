    /**
     * @see javax.servlet.Filter#doFilter(
     * javax.servlet.ServletRequest,
     * javax.servlet.ServletResponse,
     * javax.servlet.FilterChain)
     */
    public void doFilter(
        ServletRequest req,
        ServletResponse res,
        FilterChain chain)
        throws IOException, ServletException
    {
        HttpServletRequest request = (HttpServletRequest) req;
        HttpServletResponse response = (HttpServletResponse) res;

        Date updateTime = null;
        try
        {
            updateTime = getLastPublishedDate(request);

            // RSS context loader needs updateTime, so stash it
            request.setAttribute("updateTime", updateTime);

            // Check the incoming if-modified-since header
            Date sinceDate =
                new Date(request.getDateHeader("If-Modified-Since"));

            if (updateTime != null)
            {
                 // convert date (JDK 1.5 workaround)
                 String date = dateFormatter.format(updateTime);
                 updateTime = new Date(date);
                 if (updateTime.compareTo(sinceDate) <= 0)
                 {
                     response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
                     return;
                 }
            }
            mLogger.debug("Not returning 304 for: "+request.getRequestURI());
        }
        catch (RollerException e)
        {
            // Thrown by getLastPublishedDate if there is a db-type error
            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
            return;
        }
        catch (IllegalArgumentException e)
        {
            // Thrown by getDateHeader if not in valid format. This can be
            // safely ignored, the only consequence is that the NOT MODIFIED
            // response is not set.
        }

        // Set outgoing last modified header
        if (updateTime != null)
        {
            response.setDateHeader("Last-Modified", updateTime.getTime());
        }

        chain.doFilter(request, response);
    }

