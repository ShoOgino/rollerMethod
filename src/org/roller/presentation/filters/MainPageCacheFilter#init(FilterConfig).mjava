    /**
     * Init method for this filter
     */
    public void init(FilterConfig filterConfig) {
        
        mLogger.info("Initializing main page cache");
        
        String factory = RollerConfig.getProperty("cache.mainpage.factory");
        String size = RollerConfig.getProperty("cache.mainpage.size");
        String timeout = RollerConfig.getProperty("cache.mainpage.timeout");
        this.excludeOwnerPages = 
                RollerConfig.getBooleanProperty("cache.mainpage.excludeOwnerEditPages");
        
        int cacheSize = 20;
        try {
            cacheSize = Integer.parseInt(size);
        } catch (Exception e) {
            mLogger.warn("Invalid cache size ["+size+"], using default");
        }
        
        long cacheTimeout = 30 * 60;
        try {
            cacheTimeout = Long.parseLong(timeout);
        } catch (Exception e) {
            mLogger.warn("Invalid cache timeout ["+timeout+
                    "], using default");
        }
        
        
        Map props = new HashMap();
        props.put("timeout", ""+cacheTimeout);
        props.put("size", ""+cacheSize);
        
        if(factory != null && factory.trim().length() > 0)
            props.put("cache.factory", factory);
        
        mLogger.info(props);
        
        mPageCache = CacheManager.constructCache(this, props);
    }

