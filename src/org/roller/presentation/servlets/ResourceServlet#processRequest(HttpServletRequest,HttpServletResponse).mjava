    /** Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     * @param request servlet request
     * @param response servlet response
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {

        String context = request.getContextPath();
        String servlet = request.getServletPath();
        String reqURI = request.getRequestURI();

        // calculate the path of the requested resource
        // we expect ... /<context>/<servlet>/path/to/resource
        String reqResource = reqURI.substring(servlet.length() + context.length());

        // Decode the resource portion.  ROL-1051
        String reqResourceDecoded = Utilities.decode(reqResource);

        // Don't allow ../ in the resource portion.  Security risk.
        if (reqResourceDecoded.indexOf("../") >= 0) {
            response.sendError(HttpServletResponse.SC_FORBIDDEN);
            return;
        }

        // now we can formulate the *real* path to the resource on the filesystem
        String resource_path = this.upload_dir + reqResourceDecoded;
        File resource = new File(resource_path);

        mLogger.debug("Resource requested ["+reqURI+"]");
        mLogger.debug("Real path is ["+resource.getAbsolutePath()+"]");

        // do a quick check to make sure the resource exits, otherwise 404
        if(!resource.exists() || !resource.canRead()) {
            response.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }

        // does the client already have this file?  if so, then 304
        Date ifModDate = new Date(request.getDateHeader("If-Modified-Since"));
        Date lastMod = new Date(resource.lastModified());
        if(lastMod.compareTo(ifModDate) <= 0) {
            mLogger.debug("Resource unmodified ... sending 304");
            response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
            return;
        }

        // looks like we'll be serving up the file ... lets set some headers
        // set last-modified date so we can do if-modified-since checks
        // set the content type based on whatever is in our web.xml mime defs
        response.addDateHeader("Last-Modified", (new Date()).getTime());
        response.setContentType(this.context.getMimeType(resource.getAbsolutePath()));

        // ok, lets serve up the file
        byte[] buf = new byte[8192];
        int length = 0;
        OutputStream out = response.getOutputStream();
        InputStream resource_file = new FileInputStream(resource);
        while((length = resource_file.read(buf)) > 0)
            out.write(buf, 0, length);

        // cleanup
        out.close();
        resource_file.close();
    }

