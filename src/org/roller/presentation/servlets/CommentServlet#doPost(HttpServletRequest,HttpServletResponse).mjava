    /**
     * Service incoming POST requests.
     *
     * Here we handle incoming comment postings.  We will collect the data,
     * validate it, and save it.
     */
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException {
        
        boolean preview = false;
        String error = null;
        String message = null;
        String entry_permalink = request.getContextPath();
        
        String method = request.getParameter("method");
        if(method == null)
            method = "post";
        else if (method.equals("preview"))
            preview = true;
        
        // parse request and validate
        RollerRequest rreq = RollerRequest.getRollerRequest(request);
        HttpSession session = request.getSession();
        
        // make sure we know the entry this comment is going to
        WeblogEntryData entry = rreq.getWeblogEntry();
        if (entry == null || entry.getId() == null) {
            session.setAttribute(RollerSession.ERROR_MESSAGE, "Cannot post comment to null entry");
            RequestDispatcher dispatcher = 
                request.getRequestDispatcher(entry_permalink);
            dispatcher.forward(request, response);
            return;
        }
            
        try {
            // we know what our weblog entry is, so setup our permalink url
            entry_permalink = entry.getPermaLink();
            
            mLogger.debug("Doing comment posting for entry = "+entry_permalink);
            
            // check if we even allow comments
            if(!RollerRuntimeConfig.getBooleanProperty("users.comments.enabled"))
                throw new Exception("Comments are disabled for this site.");
            
            if (!entry.getWebsite().getAllowComments().booleanValue() ||
                    !entry.getCommentsStillAllowed())
                throw new Exception("Comments not allowed on this entry");
            
            WebsiteData website = entry.getWebsite();
            
            // Construct our Comment object from the submitted data
            WeblogManager mgr = RollerFactory.getRoller().getWeblogManager();
            CommentFormEx cf = new CommentFormEx();
            CommentData comment = new CommentData();
            RequestUtils.populate(cf, request);
            cf.copyTo(comment, request.getLocale());
            
            comment.setWeblogEntry(entry);
            comment.setRemoteHost(request.getRemoteHost());
            comment.setPostTime(new java.sql.Timestamp(System.currentTimeMillis()));
            
            cf.setWeblogEntry(entry);
            cf.setPostTime(new java.sql.Timestamp(System.currentTimeMillis()));
            
            request.setAttribute("commentForm", cf);
            request.setAttribute("blogEntry", entry);
            
            if (preview) {
                message = "This is a comment preview only";
                
                // If comment contains blacklisted text, warn commenter
                SpamChecker checker = new SpamChecker();
                if (checker.checkComment(comment)) {
                   error = bundle.getString("commentServlet.previewMarkedAsSpam");
                   mLogger.debug("Comment marked as spam"); 
                }
                request.setAttribute("previewComments", "dummy");
                mLogger.debug("Comment is a preview");
                
            } else {
                if (this.authenticator.authenticate(comment, request)) {
                    mLogger.debug("Comment passed authentication");
                    
                    // If comment contains blacklisted text, mark as spam
                    SpamChecker checker = new SpamChecker();
                    if (checker.checkComment(comment)) {
                       comment.setSpam(Boolean.TRUE);
                       error = bundle.getString("commentServlet.commentMarkedAsSpam");
                       mLogger.debug("Comment marked as spam"); 
                    }
                     
                    // If comment moderation is on, set comment as pending
                    if (website.getModerateComments().booleanValue()) {
                        comment.setPending(Boolean.TRUE);   
                        comment.setApproved(Boolean.FALSE);
                        message = bundle.getString("commentServlet.submittedToModerator");
                    } else { 
                        comment.setPending(Boolean.FALSE);   
                        comment.setApproved(Boolean.TRUE);
                    }
                    
                    mgr.saveComment(comment);
                    RollerFactory.getRoller().flush();
                    reindexEntry(entry);
                    
                    // Clear all caches associated with comment
                    CacheManager.invalidate(comment);
                    
                    // Send email notifications
                    RollerContext rc = RollerContext.getRollerContext();                                
                    String rootURL = rc.getAbsoluteContextUrl(request);
                    if (rootURL == null || rootURL.trim().length()==0) {
                        rootURL = RequestUtils.serverURL(request) + request.getContextPath();
                    }            
                    sendEmailNotification(comment, rootURL);
                    
                } else {
                    error = bundle.getString("error.commentAuthFailed");
                    mLogger.debug("Comment failed authentication");
                }
            }
        } catch (RollerException re) {
            mLogger.error("ERROR posting comment", re);
            error = re.getMessage();
        } catch (Exception e) {
            error = e.getMessage();
        }
        
        // the work has been done, now send the user back to the entry page
        if (error != null)
            session.setAttribute(RollerSession.ERROR_MESSAGE, error);
        if (message != null)
            session.setAttribute(RollerSession.STATUS_MESSAGE, message);
        
        if(error == null && !preview) {
            entry_permalink = request.getContextPath()+entry_permalink;            
            mLogger.debug("comment complete, redirecting to "+entry_permalink);
            response.sendRedirect(entry_permalink);
        } else {
            mLogger.debug("more work needed, forwarding to "+entry_permalink);
            RequestDispatcher dispatcher = 
                request.getRequestDispatcher(entry_permalink);
            dispatcher.forward(request, response);
        }
    }

