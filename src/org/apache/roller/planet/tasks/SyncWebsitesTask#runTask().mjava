    /**
     * Ensure there's a subscription in the "all" group for every Roller weblog.
     */
    public void runTask() {
        
        // make sure we have an absolute url value
        String absUrl = RollerRuntimeConfig.getProperty("site.absoluteurl");
        if(absUrl == null || absUrl.trim().length() == 0) {
            log.error("ERROR: cannot sync websites with Planet Roller - "
                    +"absolute URL not specified in Roller Config");
            return;
        }
        
        try {
            PlanetManager planet = PlanetFactory.getPlanet().getPlanetManager();
            UserManager userManager = RollerFactory.getRoller().getUserManager();
            
            // first, make sure there is an "all" planet group
            PlanetData planetObject = planet.getPlanet("zzz_default_planet_zzz");
            PlanetGroupData group = planet.getGroup(planetObject, "all");
            if(group == null) {
                group = new PlanetGroupData();
                group.setPlanet(planetObject);
                group.setHandle("all");
                group.setTitle("all");
                planet.saveGroup(group);
            }
            
            // walk through all enable weblogs and add/update subs as needed
            List liveUserFeeds = new ArrayList();
            Iterator websites =
                    userManager.getWebsites(null, Boolean.TRUE, Boolean.TRUE, null, null, 0, -1).iterator();
            while(websites.hasNext()) {
                Weblog weblog = (Weblog) websites.next();
                
                String siteUrl = URLUtilities.getWeblogURL(weblog, null, true);
                String feedUrl = URLUtilities.getWeblogFeedURL(weblog, null, "entries", "rss", null, null, null, false, true);
                
                // add feed url to the "live" list
                liveUserFeeds.add(feedUrl);
                
                // if sub already exists then update it, otherwise add it
                PlanetSubscriptionData sub = planet.getSubscription(feedUrl);
                if (sub == null) {
                    log.info("ADDING feed: "+feedUrl);
                    
                    sub = new PlanetSubscriptionData();
                    sub.setTitle(weblog.getName());
                    sub.setFeedURL(feedUrl);
                    sub.setSiteURL(siteUrl);
                    sub.setAuthor(weblog.getHandle());
                    
                    planet.saveSubscription(sub);
                    group.getSubscriptions().add(sub);
                } else {
                    sub.setTitle(weblog.getName());
                    sub.setAuthor(weblog.getHandle());
                    
                    planet.saveSubscription(sub);
                }
            }
            
            // new subs added, existing subs updated, now delete old subs
            List deleteSubs = new ArrayList();
            Iterator subs = group.getSubscriptions().iterator();
            while(subs.hasNext()) {
                PlanetSubscriptionData sub =
                        (PlanetSubscriptionData) subs.next();
                
                // only delete subs from the group if ...
                // 1. they are local, meaning they use our absolute url
                // 2. they are no longer listed as a weblog 
                if (sub.getFeedURL().startsWith(absUrl) && 
                        !liveUserFeeds.contains(sub.getFeedURL())) {
                    deleteSubs.add(sub);
                }
            }
            
            // now go back through deleteSubs and do actual delete
            // this is required because deleting a sub in the loop above
            // causes a ConcurrentModificationException because we can't
            // modify a collection while we iterate over it
            Iterator deletes = deleteSubs.iterator();
            while(deletes.hasNext()) {
                PlanetSubscriptionData sub =
                        (PlanetSubscriptionData) deletes.next();
                
                log.info("DELETING feed: "+sub.getFeedURL());
                planet.deleteSubscription(sub);
                group.getSubscriptions().remove(sub);
            }
            
            // all done, lets save
            planet.saveGroup(group);
            PlanetFactory.getPlanet().flush();
            
        } catch (RollerException e) {
            log.error("ERROR refreshing entries", e);
        } finally {
            // don't forget to release
            RollerFactory.getRoller().release();
            PlanetFactory.getPlanet().release();
        }
    }

