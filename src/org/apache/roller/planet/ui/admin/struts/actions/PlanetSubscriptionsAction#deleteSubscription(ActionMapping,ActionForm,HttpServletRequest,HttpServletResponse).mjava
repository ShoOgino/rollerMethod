    /** 
     * Delete subscription, reset form  
     */
    public ActionForward deleteSubscription(ActionMapping mapping,
            ActionForm actionForm, HttpServletRequest request,
            HttpServletResponse response) throws IOException, ServletException {
        
        ActionForward forward = mapping.findForward("planetSubscriptions.page");
        try {
            //RollerRequest rreq = RollerRequest.getRollerRequest(request);
            if (RollerSession.getRollerSession(request).isGlobalAdminUser()) {
                PlanetManager pmgr = PlanetFactory.getPlanet().getPlanetManager();
                PlanetSubscriptionForm form = (PlanetSubscriptionForm)actionForm;
                if (form.getId() != null) {
                    PlanetSubscriptionData sub =
                            pmgr.getSubscriptionById(form.getId());
                    
                    String groupHandle = form.getGroupHandle();
                    if (groupHandle == null) {
                        groupHandle = "all";
                    }
                    
                    PlanetData defaultPlanet = pmgr.getPlanet("zzz_default_planet_zzz");
                    PlanetGroupData targetGroup = pmgr.getGroup(defaultPlanet, groupHandle);
                    
                    targetGroup.getSubscriptions().remove(sub);
                    pmgr.deleteSubscription(sub);
                    PlanetFactory.getPlanet().flush();
                    
                    form.doReset(mapping, request);
                    
                    form.setGroupHandle(groupHandle);
                    request.setAttribute("model",
                            new SubscriptionsPageModel(
                            targetGroup, request, response, mapping, form));
                    
                    ActionMessages messages = new ActionMessages();
                    messages.add(null,
                            new ActionMessage("planetSubscription.success.deleted"));
                    saveMessages(request, messages);
                }
            } else {
                forward = mapping.findForward("access-denied");
            }
        } catch (Exception e) {
            ActionErrors errors = new ActionErrors();
            errors.add(null, new ActionError("planetSubscription.error.deleting"));
            saveErrors(request, errors);
        }
        return forward;
    }

