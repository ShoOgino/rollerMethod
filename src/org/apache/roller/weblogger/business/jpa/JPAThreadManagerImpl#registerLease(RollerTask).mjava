    /**
     * Try to aquire a lock for a given RollerTask.
     */
    public boolean registerLease(RollerTask task) {
        // query for existing lease record first
        TaskLock taskLock = null;
        try {
            taskLock = this.getTaskLockByName(task.getName());

            if(taskLock == null) {
                // insert an empty record, then we will actually acquire the
                // lease below using an update statement
                taskLock = new TaskLock();
                taskLock.setName(task.getName());
                taskLock.setTimeAquired(new Date(0));
                taskLock.setTimeLeased(0);

                // save it and flush
                this.saveTaskLock(taskLock);
                RollerFactory.getRoller().flush();
            }

        } catch (RollerException ex) {
            log.warn("Error getting or inserting TaskLock", ex);
            return false;
        }

        // try to acquire lease
        try {
            // calculate lease expiration time
            // expireTime = startTime + (timeLeased * 60sec/min) - 1 sec
            // we remove 1 second to adjust for precision differences
            long leaseExpireTime = taskLock.getTimeAquired().getTime()+
                    (60000*taskLock.getTimeLeased())-1000;

            Query q = strategy.getNamedUpdate(
                    "TaskLock.updateClient&Timeacquired&TimeleasedByName&Timeacquired");
            q.setParameter(1, task.getClientId());
            q.setParameter(2, Integer.valueOf(task.getLeaseTime()));
            q.setParameter(3, task.getName());
            q.setParameter(4, taskLock.getTimeAquired());
            q.setParameter(5, new Timestamp(leaseExpireTime));
            int result = q.executeUpdate();
            
            if(result == 1) {
                return true;
            }

        } catch (Exception e) {
            log.warn("Error obtaining lease, assuming race condition.", e);
            return false;
        }

        return false;
    }

