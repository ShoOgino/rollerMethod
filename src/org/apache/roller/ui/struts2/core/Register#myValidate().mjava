    public void myValidate() {
        
        // if usingSSO, we don't want to error on empty password/username from HTML form.
        setFromSS0(false);
        boolean usingSSO = RollerConfig.getBooleanProperty("users.sso.enabled");
        if(usingSSO) {
            boolean storePassword = RollerConfig.getBooleanProperty("users.sso.passwords.saveInRollerDb");
            User fromSSO = CustomUserRegistry.getUserDetailsFromAuthentication();
            if(fromSSO != null) {
                String password = RollerConfig.getProperty("users.sso.passwords.defaultValue", "<unknown>");
                if(storePassword) {
                    password = fromSSO.getPassword();
                }
                getBean().setPasswordText(password);
                getBean().setPasswordConfirm(password);
                getBean().setUserName(fromSSO.getUserName());
                setFromSS0(true);
            }
        }
        
        String allowed = RollerConfig.getProperty("username.allowedChars");
        if(allowed == null || allowed.trim().length() == 0) {
            allowed = DEFAULT_ALLOWED_CHARS;
        }
        
        // check that username only contains safe characters
        String safe = CharSetUtils.keep(getBean().getUserName(), allowed);
        if (!safe.equals(getBean().getUserName()) ) {
            addError("error.add.user.badUserName");
        }
        
        // check that passwords match
        if(!getBean().getPasswordText().equals(getBean().getPasswordConfirm())) {
            addError("Register.error.passowordMismatch");
        }
        
        // check that username is not taken
        if(!StringUtils.isEmpty(getBean().getUserName())) try {
            UserManager mgr = RollerFactory.getRoller().getUserManager();
            if(mgr.getUserByUserName(getBean().getUserName(), null) != null) {
                addError("error.add.user.userNameInUse");
                // reset user name
                getBean().setUserName(null);
            }
        } catch (RollerException ex) {
            log.error("error checking for user", ex);
            // TODO: i18n
            addError("unexpected error");
        }
    }

