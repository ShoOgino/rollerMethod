    /**
     *
     */
    public ActionForward sendTrackback(
            ActionMapping mapping,
            ActionForm actionForm,
            HttpServletRequest request,
            HttpServletResponse response) throws RollerException {
        
        ActionMessages resultMsg = new ActionMessages();
        ActionForward forward = mapping.findForward("weblogEdit.page");
        ActionErrors errors = new ActionErrors();
        WeblogEntryData entry = null;
        try {
            WeblogEntryFormEx form = (WeblogEntryFormEx)actionForm;
            String entryid = form.getId();
            if ( entryid == null ) {
                entryid = request.getParameter(RequestConstants.WEBLOGENTRY_ID);
            }
            Roller roller = RollerFactory.getRoller();
            RollerContext rctx= RollerContext.getRollerContext();
            WeblogManager wmgr= roller.getWeblogManager();
            entry = wmgr.getWeblogEntry(entryid);
            
            RollerSession rses = RollerSession.getRollerSession(request);
            if (rses.isUserAuthorizedToAuthor(entry.getWebsite())) {                                
                if (form.getTrackbackUrl() != null) {
                                    
                    RollerMessages messages = wmgr.sendTrackback(entry, form.getTrackbackUrl());
                    
                    for (Iterator mit = messages.getMessages(); mit.hasNext();) {
                        RollerMessage msg = (RollerMessage) mit.next();
                        resultMsg.add(null, new ActionMessage(msg.getKey(), msg.getArgs())); 
                    }
                    for (Iterator eit = messages.getErrors(); eit.hasNext();) {
                        RollerMessage err = (RollerMessage) eit.next();
                        errors.add(null, new ActionMessage(err.getKey(), err.getArgs())); 
                    }
                    form.setTrackbackUrl(null);
                }
                                                
            } else {
                forward = mapping.findForward("access-denied");
            }
        } catch (Exception e) // unexpected
        {
            mLogger.error(e);
            String msg = e.getMessage();
            if ( msg == null ) {
                msg = e.getClass().getName();
            }
            errors.add(ActionErrors.GLOBAL_ERROR,
                    new ActionError("error.general",msg));
        }
        
        saveErrors(request, errors);
        saveMessages(request, resultMsg);
        
        request.setAttribute("model",
                new WeblogEntryPageModel(request, response, mapping,
                (WeblogEntryFormEx)actionForm,
                WeblogEntryPageModel.EDIT_MODE));
        
        return forward;
    }

