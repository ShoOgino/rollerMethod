    public ActionForward importEntries(
                              ActionMapping       mapping,
                              ActionForm          actionForm,
                              HttpServletRequest  request,
                              HttpServletResponse response)
    throws IOException, ServletException
    {
        ActionForward forward = mapping.findForward("importEntries.page");
        try
        {
            RollerRequest rreq = RollerRequest.getRollerRequest(request);
            RollerSession rollerSession = RollerSession.getRollerSession(rreq.getRequest());
            if ( rreq.getWebsite() == null 
                  || !rollerSession.isUserAuthorizedToAdmin(rreq.getWebsite()))
            {
                forward = mapping.findForward("access-denied");
            }
            else
            {
			   getXmlFiles(actionForm, rreq);
                ImportEntriesForm form = (ImportEntriesForm)actionForm;
                if (StringUtils.isNotEmpty(form.getImportFileName()))
                {
                    // "default" values
                    WebsiteData website = rreq.getWebsite();

                    // load selected file
                    String dir = RollerFactory.getRoller().getFileManager().getUploadDir();
                    File f = new File(dir + website.getHandle() +
                                      "/" + form.getImportFileName());

                    //ArchiveParser archiveParser =
                        //new ArchiveParser(RollerFactory.getRoller(), rreq.getWebsite(), f);
                    String parseMessages = null; // archiveParser.parse();

                    // buf will be non-zero if Entries were imported
                    if (parseMessages.length() > 0)
                    {
                        ActionMessages notices = new ActionMessages();
                        notices.add(ActionMessages.GLOBAL_MESSAGE, 
                                     new ActionMessage("weblogEntryImport.importFiles", 
                                                   parseMessages));
                        saveMessages(request, notices);

                        // Flush the page cache
                        //PageCacheFilter.removeFromCache(request, website);
                        CacheManager.invalidate(website);
                    }
                    else
                    {
                        ActionErrors errors = new ActionErrors();
                        errors.add(ActionErrors.GLOBAL_ERROR,
                                   new ActionError("error.importing.entries", ""));
                        saveErrors(request,errors);
                    }
                }
            }
        }
        catch (Exception e)
        {
            request.getSession().getServletContext().log("ERROR",e);
            throw new ServletException(e);
        }
        return forward;
    }

