    /**
     * Move folders and bookmarks indicated by BookmarksForm bean.
     * @param mapping Action mapping.
     * @param actionForm  Form bean.
     * @param request Request.
     * @param response Response.
     * @return Forward to BookmarksForm or access-denied.
     * @throws RollerException
     */
    public ActionForward moveSelected(
        ActionMapping       mapping,
        ActionForm          actionForm,
        HttpServletRequest  request,
        HttpServletResponse response)
        throws RollerException
    {
        ActionMessages messages = new ActionMessages();
        ActionForward forward = mapping.findForward("BookmarksForm");
        Roller roller = RollerFactory.getRoller();
        BookmarksPageModel pageModel = new BookmarksPageModel(
            request, response, mapping, (BookmarksForm)actionForm);
        request.setAttribute("model", pageModel);
        WebsiteData website = pageModel.getFolder().getWebsite();

        if (RollerSession.getRollerSession(request).isUserAuthorizedToAuthor(website))
        {
            try 
            {
                BookmarkManager bmgr = roller.getBookmarkManager();
                BookmarksForm form = (BookmarksForm)actionForm;
    
                mLogger.debug("Moving folders and bookmarks to folder, id="
                    + form.getMoveToFolderId());
    
                // Move subfolders to new folder.
                String folders[] = form.getSelectedFolders();
                FolderData parent = bmgr.getFolder(form.getMoveToFolderId());
                if (null != folders)
                {
                    for (int i = 0; i < folders.length; i++)
                    {
                        FolderData fd = bmgr.getFolder(folders[i]);
    
                        // Don't move folder into itself.
                        if (    !fd.getId().equals(parent.getId())
                             && !parent.descendentOf(fd))
                        {
                            bmgr.moveFolder(fd, parent);
                        }
                        else 
                        {
                            messages.add(null, new ActionMessage(
                                "bookmarksForm.warn.notMoving",fd.getName()));
                        }
                    }
                }
    
                // Move bookmarks.
                String bookmarks[] = form.getSelectedBookmarks();
                if (null != bookmarks)
                {
                    for (int j = 0; j < bookmarks.length; j++)
                    {
                        // maybe we should be using folder.addBookmark()?
                        BookmarkData bd = bmgr.getBookmark(bookmarks[j]);
                        bd.setFolder(parent);
                        bmgr.saveBookmark(bd);
                    }
                }
                RollerFactory.getRoller().flush();

                CacheManager.invalidate(website);
                
                saveMessages(request, messages);
                
                // recreate model now that folder is altered
                pageModel = new BookmarksPageModel(
                        request, response, mapping, (BookmarksForm)actionForm);
                request.setAttribute("model", pageModel);
            }
            catch (RollerException e)
            {
                ActionErrors errors = new ActionErrors();
                errors.add(null, new ActionError("bookmarksForm.error.move"));
                saveErrors(request, errors);       
            }
        }
        else
        {
            forward = mapping.findForward("access-denied");
        }
        return forward;
    }

