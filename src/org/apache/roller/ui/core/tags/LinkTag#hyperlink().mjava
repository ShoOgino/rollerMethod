    // ----------------------------------------------------- Protected Methods
    /**
     * Return the specified hyperlink, modified as necessary with optional
     * request parameters.
     * 
     * @exception JspException
     *                if an error occurs preparing the hyperlink
     */
    protected String hyperlink() throws JspException
    {
        String href = this.href;
        // If "forward" was specified, compute the "href" to forward to
//        if (forward != null)
//        {
//            ActionForwards forwards = (ActionForwards) pageContext
//                            .getAttribute(Action.FORWARDS_KEY,
//                                            PageContext.APPLICATION_SCOPE);
//            ActionMapping mapping = (ActionMapping)pageContext.getAttribute(ActionConfig.)            
//            if (forwards == null)
//                throw new JspException(messages.getMessage("linkTag.forwards"));
//            ActionForward forward = forwards.findForward(this.forward);
//            if (forward == null)
//                throw new JspException(messages.getMessage("linkTag.forward"));
//            HttpServletRequest request = (HttpServletRequest) pageContext
//                            .getRequest();
//            href = request.getContextPath() + forward.getPath();
//        }
        // Just return the "href" attribute if there is no bean to look up
        if ((property != null) && (name == null))
            throw new JspException(messages.getMessage("getter.name"));
        if (name == null)
            return (href);
        // Look up the map we will be using
        Object bean = pageContext.findAttribute(name);
        if (bean == null)
            throw new JspException(messages.getMessage("getter.bean", name));
        Map map = null;
        if (property == null)
        {
            try
            {
                map = (Map) bean;
            }
            catch (ClassCastException e)
            {
                throw new JspException(messages.getMessage("linkTag.type"));
            }
        }
        else
        {
            try
            {
                map = (Map) PropertyUtils.getProperty(bean, property);
                if (map == null)
                    throw new JspException(messages.getMessage(
                                    "getter.property", property));
            }
            catch (IllegalAccessException e)
            {
                throw new JspException(messages.getMessage("getter.access",
                                property, name));
            }
            catch (InvocationTargetException e)
            {
                Throwable t = e.getTargetException();
                throw new JspException(messages.getMessage("getter.result",
                                property, t.toString()));
            }
            catch (ClassCastException e)
            {
                throw new JspException(messages.getMessage("linkTag.type"));
            }
            catch (NoSuchMethodException e)
            {
                throw new JspException(messages.getMessage("getter.method",
                                property, name));
            }
        }
            // Append the required query parameters
//        StringBuffer sb = new StringBuffer(href);
//        boolean question = (href.indexOf("?") >= 0);
//        Iterator keys = map.keySet().iterator();
//        while (keys.hasNext())
//        {
//            String key = (String) keys.next();
//            Object value = map.get(key);
//            if (value instanceof String[])
//            {
//                String values[] = (String[]) value;
//                for (int i = 0; i < values.length; i++)
//                {
//                    if (question)
//                        sb.append('&');
//                    else
//                    {
//                        sb.append('?');
//                        question = true;
//                    }
//                    sb.append(key);
//                    sb.append('=');
//                    sb.append(URLEncoder.encode(values[i]));
//                }
//            }
//            else
//            {
//                if (question)
//                    sb.append('&');
//                else
//                {
//                    sb.append('?');
//                    question = true;
//                }
//                sb.append(key);
//                sb.append('=');
//                sb.append(URLEncoder.encode(value.toString()));
//            }
//        }
//        // Return the final result
//        return (sb.toString());
        try
        {
            return TagUtils.getInstance().computeURL(
                            pageContext,
                            forward,
                            href,
                            null, 
                            null,
                            null,
                            map,
                            null,
                            false
                            );
        }
        catch (MalformedURLException e)
        {
            throw new JspException(e);
        }
    }

