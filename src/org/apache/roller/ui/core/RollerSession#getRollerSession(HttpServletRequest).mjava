    //---------------------------------------------------------------- Construction
    /** 
     * Get RollerSession from request (and add user if not already present).
     */
    public static RollerSession getRollerSession(HttpServletRequest request)
    {
        RollerSession rollerSession = null;
        HttpSession session = request.getSession(false);
        if (session != null) 
        {
            rollerSession = (RollerSession)session.getAttribute(ROLLER_SESSION);
            if (rollerSession == null) 
            {
                // HttpSession with no RollerSession? 
                // Must be a session that was de-serialized from a previous run.
                rollerSession = new RollerSession();
                session.setAttribute(ROLLER_SESSION, rollerSession);
            }
            Principal principal = request.getUserPrincipal();
            if (rollerSession.getAuthenticatedUser() == null && principal != null)
            {
                try 
                {
                    UserManager umgr = RollerFactory.getRoller().getUserManager();
                    UserData user = umgr.getUserByUserName(principal.getName());

                    // try one time to auto-provision, only happens if user==null
                    // which means installation has SSO-enabled in security.xml
                    if(user == null) 
                    {
                        if(AutoProvisioningHelper.executeAutoProvisioning()) {
                          user = umgr.getUserByUserName(principal.getName());
                        }
                    } 
                    
                    // only set authenticated user if user is enabled
                    if(user != null && user.getEnabled().booleanValue()) 
                    {
                        rollerSession.setAuthenticatedUser(user);  
                    }                    
                }
                catch (RollerException e)
                {
                    mLogger.error("ERROR: getting user object",e);
                }
            }
        }
        return rollerSession;
    }

