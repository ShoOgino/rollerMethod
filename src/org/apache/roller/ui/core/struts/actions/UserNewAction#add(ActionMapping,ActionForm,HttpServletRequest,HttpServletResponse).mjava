    /** Process POST of new user information. */
    public ActionForward add(
            ActionMapping       mapping,
            ActionForm          actionForm,
            HttpServletRequest  request,
            HttpServletResponse response)
            throws IOException, ServletException {
        UserFormEx form = (UserFormEx)actionForm;
        RollerRequest rreq = RollerRequest.getRollerRequest(request);
        ServletContext ctx = rreq.getServletContext();
        
        boolean reg_allowed =
                RollerRuntimeConfig.getBooleanProperty("users.registration.enabled");
        
        if ( !reg_allowed && !request.isUserInRole("admin")) {
            throw new ServletException("New users disabled!");
        }
        
        ActionMessages msgs = new ActionMessages();
        ActionMessages errors = validate(form, new ActionErrors());
        if (!errors.isEmpty()) {
            saveErrors(request, errors);
        } else try {
            // Add new user
            UserManager mgr = RollerFactory.getRoller().getUserManager();
            
            UserData ud = new UserData();
            form.copyTo(ud, request.getLocale()); // doesn't copy password
            ud.setId(null);
            ud.setDateCreated(new java.util.Date());
            ud.setEnabled(Boolean.TRUE);
            
            // If user set both password and passwordConfirm then reset password
            if (   !StringUtils.isEmpty(form.getPasswordText())
                && !StringUtils.isEmpty(form.getPasswordConfirm())) {
                ud.resetPassword(RollerFactory.getRoller(),
                        form.getPasswordText(), form.getPasswordConfirm());
            }
            
            boolean activationEnabled = RollerConfig.getBooleanProperty(
                    "user.account.activation.enabled");
            if (activationEnabled) {
                // User account will be enabled after the activation process
                ud.setEnabled(Boolean.FALSE);
                
                // Create & save the activation data
                String activationCode = UUID.randomUUID().toString();
                
                if (mgr.getUserByActivationCode(activationCode) != null) {
                    // In the *extremely* unlikely event that we generate an
                    // activation code that is already use, we'll retry 3 times.
                    int numOfRetries = 3;                    
                    if (numOfRetries < 1) numOfRetries = 1;                    
                    for (int i = 0; i < numOfRetries; i++) {
                        activationCode = UUID.randomUUID().toString();
                        if (mgr.getUserByActivationCode(activationCode) == null) {
                            break;
                        } else {
                            activationCode = null;
                        }
                    }
                    // In more unlikely event that three retries isn't enough                  
                    if (activationCode == null){
                        throw new RollerException("error.add.user.activationCodeInUse");
                    }
                }                
                ud.setActivationCode(activationCode);
            }
                        
            if (activationEnabled && ud.getActivationCode() != null) {
                // send activation mail to the user
                sendActivationMail(request, ud, errors);
                
                // activationStatus = 1:activated, 0:has to be activated, -1:error
                request.setAttribute("activationStatus", "0");
            }
            
            if (errors.size() > 0) {
                // Error occured so save it and bail out
                saveErrors(request, errors);
                
            } else {
                // save new user
                mgr.addUser(ud);
                RollerFactory.getRoller().flush();

                if (form.getAdminCreated()) {
                    // User created for admin, so return to new user page with empty form
                    msgs.add(ActionMessages.GLOBAL_MESSAGE,
                            new ActionMessage("newUser.created"));
                    saveMessages(request, msgs);
                    form.reset(mapping, request);
                    return createUser(mapping, actionForm, request, response);
                    
                } else {
                    // User registered, so go to welcome page
                    request.setAttribute("contextURL",
                            RollerRuntimeConfig.getAbsoluteContextURL());

                    // Invalidate session, otherwise new user who was originally 
                    // authenticated via LDAP/SSO will remain logged in with 
                    // a but without a valid Roller role.
                    request.getSession().invalidate();

                    return mapping.findForward("welcome.page");
                }
            }
            
        } catch (RollerException e) {
            errors.add(ActionErrors.GLOBAL_ERROR, new ActionError(e.getMessage()));
            saveErrors(request,errors);
            mLogger.error("ERROR in addUser", e);
            form.setUserName("");
        }
        
        if (form.getAdminCreated()) {
            return mapping.findForward("createUser");
        } else {
            // Error occured, send user back to new user form
            return mapping.findForward("registerUser");
        }
    }

