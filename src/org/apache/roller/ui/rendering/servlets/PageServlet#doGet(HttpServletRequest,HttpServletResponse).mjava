    /**
     * Handle GET requests for weblog pages.
     */
    public void doGet(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        log.debug("Entering");
        
        WebsiteData weblog = null;
        
        WeblogPageRequest pageRequest = null;
        try {
            pageRequest = new WeblogPageRequest(request);
            
            weblog = pageRequest.getWeblog();
            if(weblog == null) {
                throw new RollerException("unable to lookup weblog: "+
                        pageRequest.getWeblogHandle());
            }
        } catch (Exception e) {
            // some kind of error parsing the request or looking up weblog
            log.debug("error creating page request", e);
            response.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        
        
        // 304 if-modified-since checking
        long sinceDate = request.getDateHeader("If-Modified-Since");
        log.debug("since date = "+sinceDate);
        if(weblog.getLastModified().getTime() <= sinceDate) {
            log.debug("NOT MODIFIED "+request.getRequestURL());
            response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
            return;
        }
        
        
        // set the content type
        String pageLink = pageRequest.getWeblogPageName();
        String mimeType = RollerContext.getServletContext().getMimeType(pageLink);
        if(mimeType != null) {
            // we found a match ... set the content type
            response.setContentType(mimeType+"; charset=utf-8");
        } else {
            response.setContentType("text/html; charset=utf-8");
        }
        
        // set last-modified date
        response.setDateHeader("Last-Modified", weblog.getLastModified().getTime());
        
        
        // cached content checking
        String cacheKey = this.CACHE_ID+":"+this.generateKey(pageRequest);
        if((!this.excludeOwnerPages || !pageRequest.isLoggedIn()) &&
                request.getAttribute("skipCache") == null) {
            
            LazyExpiringCacheEntry entry =
                    (LazyExpiringCacheEntry) this.contentCache.get(cacheKey);
            if(entry != null) {
                CachedContent cachedContent = 
                        (CachedContent) entry.getValue(weblog.getLastModified().getTime());
                
                if(cachedContent != null) {
                    log.debug("HIT "+cacheKey);
                    this.hits++;
                    
                    response.setContentLength(cachedContent.getContent().length);
                    response.getOutputStream().write(cachedContent.getContent());
                    return;

                } else {
                    log.debug("HIT-EXPIRED "+cacheKey);
                }
                
            } else {
                log.debug("MISS "+cacheKey);
                this.misses++;
            }
        }

        
        // figure out what we are going to render
        Template page = null;
        
        // If this is a popup request, then deal with it specially
        if (request.getParameter("popup") != null) {
            try {
                // Does user have a popupcomments page?
                page = weblog.getPageByName("_popupcomments");
            } catch(Exception e ) {
                // ignored ... considered page not found
            }
            
            // User doesn't have one so return the default
            if(page == null) {
                page = new WeblogTemplate("templates/weblog/popupcomments.vm", weblog,
                        "Comments", "Comments", "dummy_link",
                        "dummy_template", new Date());
            }
            
        // If request specified the page, then go with that
        } else if (pageRequest.getWeblogPageName() != null) {
            try {
                page = weblog.getPageByLink(pageRequest.getWeblogPageName());
            } catch(Exception e) {
                log.error("Error getting page: "+pageRequest.getWeblogPageName(), e);
            }
            
        // If page not available from request, then use weblog's default
        } else {
            try {
                page = weblog.getDefaultPage();
            } catch(Exception e) {
                log.error("Error getting weblogs default page", e);
            }
        }
        
        // Still no page?  Then that is a 404
        if (page == null) {
            if(!response.isCommitted()) response.reset();
            response.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        
        log.debug("page found, dealing with it");
        
        // validation
        boolean invalid = false;
        if(pageRequest.getWeblogAnchor() != null) {
            
            // permalink specified.  entry must exist and locale must match
            if(pageRequest.getWeblogEntry() == null) {
                invalid = true;
            } else if (pageRequest.getLocale() != null && 
                    !pageRequest.getLocale().equals(pageRequest.getWeblogEntry().getLocale())) {
                invalid = true;
            }
            
        } else if(pageRequest.getWeblogCategoryName() != null) {
            
            // category specified.  category must exist.
            if(pageRequest.getWeblogCategory() == null) {
                invalid = true;
            }
        }
        
        if(invalid) {
            if(!response.isCommitted()) response.reset();
            response.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        
        
        // looks like we need to render content
        HashMap model = new HashMap();
        try {
            PageContext pageContext = JspFactory.getDefaultFactory().getPageContext(
                    this, request, response,"", true, 8192, true);
            
            // special hack for menu tag
            request.setAttribute("pageRequest", pageRequest);
            
            // populate the rendering model
            Map initData = new HashMap();
            initData.put("request", request);
            initData.put("pageRequest", pageRequest);
            initData.put("pageContext", pageContext);
            
            // Feeds get the weblog specific page model
            ModelLoader.loadPageModels(model, initData);
            
            // special handling for site wide weblog
            if (RollerRuntimeConfig.isSiteWideWeblog(weblog.getHandle())) {
                ModelLoader.loadSiteModels(model, initData);
            }
            
            // add helpers
            ModelLoader.loadUtilityHelpers(model, initData);
            ModelLoader.loadWeblogHelpers(model, initData);

            // Feeds get weblog's custom models too
            ModelLoader.loadCustomModels(weblog, model, initData);
            
            // ick, gotta load pre-3.0 model stuff as well :(
            ModelLoader.loadOldModels(model, request, response, pageContext, pageRequest);
            
        } catch (RollerException ex) {
            log.error("Error loading model objects for page", ex);
            
            if(!response.isCommitted()) response.reset();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            return;
        }
        
        
        // lookup Renderer we are going to use
        Renderer renderer = null;
        try {
            log.debug("Looking up renderer");
            renderer = RendererManager.getRenderer("velocityWeblogPage", page.getId());
        } catch(Exception e) {
            // nobody wants to render my content :(
            log.error("Couldn't find renderer for page "+page.getId(), e);
            
            if(!response.isCommitted()) response.reset();
            response.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        
        // render content.  use default size of about 24K for a standard page
        CachedContent rendererOutput = new CachedContent(24567);
        try {
            log.debug("Doing rendering");
            renderer.render(model, rendererOutput.getCachedWriter());
            
            // flush rendered output and close
            rendererOutput.flush();
            rendererOutput.close();
        } catch(Exception e) {
            // bummer, error during rendering
            log.error("Error during rendering for page "+page.getId(), e);
            
            if(!response.isCommitted()) response.reset();
            response.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        
        
        // post rendering process
        
        // flush rendered content to response
        log.debug("Flushing response output");
        response.setContentLength(rendererOutput.getContent().length);
        response.getOutputStream().write(rendererOutput.getContent());
        
        // cache rendered content.  only cache if user is not logged in?
        if((!this.excludeOwnerPages || !pageRequest.isLoggedIn()) &&
                request.getAttribute("skipCache") == null) {
            log.debug("PUT "+cacheKey);
            this.contentCache.put(cacheKey, new LazyExpiringCacheEntry(rendererOutput));
        } else {
            log.debug("SKIPPED "+cacheKey);
            this.skips++;
        }
        
        log.debug("Exiting");
    }

