    /**
     * Service incoming POST requests.
     *
     * Here we handle incoming comment postings.
     */
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException {
        
        String error = null;
        String message = null;
        String entry_permalink = request.getContextPath();
        
        // are we doing a preview?  or a post?
        String method = request.getParameter("method");
        boolean preview = (method != null && method.equals("preview")) ? true : false;
        
        // throttling protection against spammers
        if(commentThrottle != null &&
                commentThrottle.processHit(request.getRemoteAddr())) {
            
            log.debug("ABUSIVE "+request.getRemoteAddr());
            IPBanList.getInstance().addBannedIp(request.getRemoteAddr());
            response.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }

        // lookup the entry being commented on and validate it
        WeblogEntryData entry = null;
        String entryid = request.getParameter("entryid");
        try {
            WeblogManager weblogMgr = RollerFactory.getRoller().getWeblogManager();
            entry = weblogMgr.getWeblogEntry(entryid);
            
            // if we couldn't find the entry then we are done
            if(entry == null) {
                log.debug("Entry was null: "+entryid);
                response.sendRedirect(request.getContextPath());
                return;
            }
            
            // we know what the weblog entry is, so setup our permalink url
            entry_permalink = entry.getPermaLink();
            
        } catch(RollerException re) {
            log.error("Error looking up entry: "+entryid, re);
            response.sendRedirect(request.getContextPath());
            return;
        }
        
        log.debug("Doing comment posting for entry = "+entry_permalink);
        
        WebsiteData website = entry.getWebsite();
        
        // check if site is allowing comments
        if(!RollerRuntimeConfig.getBooleanProperty("users.comments.enabled"))
            error = "Comments are disabled for this site.";
        
        // check if weblog and entry are allowing comments
        if (!website.getAllowComments().booleanValue() ||
                !entry.getCommentsStillAllowed())
            error = "Comments not allowed on this entry";
        
        // bail now if we have already found an error
        if(error != null) {
            HttpSession session = request.getSession();
            session.setAttribute(RollerSession.ERROR_MESSAGE, error);
            RequestDispatcher dispatcher = request.getRequestDispatcher(entry_permalink);
            dispatcher.forward(request, response);
            return;
        }
        
        
        // collect input from request params and construct new comment object
        // fields: name, email, url, content, notify
        // TODO: data validation on collected comment data
        CommentData comment = new CommentData();
        comment.setName(request.getParameter("name"));
        comment.setEmail(request.getParameter("email"));
        comment.setUrl(request.getParameter("url"));
        comment.setContent(request.getParameter("content"));
        comment.setNotify(new Boolean((request.getParameter("notify") != null)));
        comment.setWeblogEntry(entry);
        comment.setRemoteHost(request.getRemoteHost());
        comment.setPostTime(new java.sql.Timestamp(System.currentTimeMillis()));
        
        // this is legacy stuff, but still used by ContextLoader
        // we can probably switch this to a CommentData without problems
        CommentFormEx cf = new CommentFormEx();
        RequestUtils.populate(cf, request);
        //cf.copyTo(comment, request.getLocale());
        cf.setWeblogEntry(entry);
        cf.setPostTime(comment.getPostTime());
        request.setAttribute("commentForm", cf);
        request.setAttribute("blogEntry", entry);
        
        
        if (preview) {
            message = "This is a comment preview only";
            
            // If comment contains blacklisted text, warn commenter
            SpamChecker checker = new SpamChecker();
            if (checker.checkComment(comment)) {
                error = bundle.getString("commentServlet.previewMarkedAsSpam");
                log.debug("Comment marked as spam");
            }
            request.setAttribute("previewComments", "dummy");
            log.debug("Comment is a preview");
            
        } else {
            if (this.authenticator.authenticate(comment, request)) {
                log.debug("Comment passed authentication");
                
                // If comment contains blacklisted text, mark as spam
                SpamChecker checker = new SpamChecker();
                if (checker.checkComment(comment)) {
                    comment.setSpam(Boolean.TRUE);
                    error = bundle.getString("commentServlet.commentMarkedAsSpam");
                    log.debug("Comment marked as spam");
                }
                
                // If comment moderation is on, set comment as pending
                if (website.getCommentModerationRequired()) {
                    comment.setPending(Boolean.TRUE);
                    comment.setApproved(Boolean.FALSE);
                    message = bundle.getString("commentServlet.submittedToModerator");
                } else {
                    comment.setPending(Boolean.FALSE);
                    comment.setApproved(Boolean.TRUE);
                }
                
                try {
                    WeblogManager mgr = RollerFactory.getRoller().getWeblogManager();
                    mgr.saveComment(comment);
                    RollerFactory.getRoller().flush();
                    
                    reindexEntry(entry);
                    
                    // Clear all caches associated with comment
                    CacheManager.invalidate(comment);
                    
                    // Send email notifications
                    RollerContext rc = RollerContext.getRollerContext();
                    String rootURL = rc.getAbsoluteContextUrl(request);
                    if (rootURL == null || rootURL.trim().length()==0) {
                        rootURL = RequestUtils.serverURL(request) + request.getContextPath();
                    }
                    sendEmailNotification(comment, rootURL);
                    
                } catch (RollerException re) {
                    log.error("Error saving comment", re);
                    error = re.getMessage();
                }
                
                
                
            } else {
                error = bundle.getString("error.commentAuthFailed");
                log.debug("Comment failed authentication");
            }
        }
        

        // the work has been done, now send the user back to the entry page
        HttpSession session = request.getSession();
        if (error != null)
            session.setAttribute(RollerSession.ERROR_MESSAGE, error);
        if (message != null)
            session.setAttribute(RollerSession.STATUS_MESSAGE, message);
        
        if(error == null && message == null && !preview) {
            entry_permalink = request.getContextPath()+entry_permalink;            
            log.debug("comment complete, redirecting to "+entry_permalink);
            response.sendRedirect(entry_permalink);
        } else {
            log.debug("more work needed, forwarding to "+entry_permalink);
            RequestDispatcher dispatcher = 
                request.getRequestDispatcher(entry_permalink);
            dispatcher.forward(request, response);
        }
    }

