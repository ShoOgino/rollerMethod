    /**
     * Handle GET requests for weblog feeds.
     */
    public void doGet(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        log.debug("Entering");
        
        WeblogFeedRequest feedRequest = null;
        WebsiteData weblog = null;
        try {
            // parse the incoming request and extract the relevant data
            feedRequest = new WeblogFeedRequest(request);
            
            // lookup weblog specified by feed request
            UserManager uMgr = RollerFactory.getRoller().getUserManager();
            weblog = uMgr.getWebsiteByHandle(feedRequest.getWeblogHandle());
            
            if(weblog == null) {
                throw new RollerException("unable to lookup weblog: "+
                        feedRequest.getWeblogHandle());
            }
        } catch(Exception e) {
            // invalid feed request format or weblog doesn't exist
            log.debug("error creating weblog feed request", e);
            response.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
            
        
        // 304 if-modified-since checking
        long sinceDate = request.getDateHeader("If-Modified-Since");
        log.debug("since date = "+sinceDate);
        if(weblog.getLastModified().getTime() <= sinceDate) {
            log.debug("NOT MODIFIED "+request.getRequestURL());
            response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
            return;
        }
        
        // set last-modified date
        response.setDateHeader("Last-Modified", weblog.getLastModified().getTime());
        
        // cached content checking
        String cacheKey = this.CACHE_ID+":"+this.generateKey(feedRequest);
        
        // we need the last expiration time for the given weblog
        long lastExpiration = weblog.getLastModified().getTime();
        
        LazyExpiringCacheEntry entry =
                (LazyExpiringCacheEntry) this.contentCache.get(cacheKey);
        if(entry != null) {
            CachedContent cachedContent = (CachedContent) entry.getValue(lastExpiration);
            
            if(cachedContent != null) {
                log.debug("HIT "+cacheKey);
                this.hits++;
                
                response.setContentLength(cachedContent.getContent().length);
                response.getOutputStream().write(cachedContent.getContent());
                return;
                
            } else {
                log.debug("HIT-EXPIRED "+cacheKey);
            }
            
        } else {
            log.debug("MISS "+cacheKey);
            this.misses++;
        }

        
        // looks like we need to render content
        HashMap model = new HashMap();
        String pageId = null;
        try {
            RollerContext rollerContext = RollerContext.getRollerContext();
            
            // determine what template to render with
            if (rollerContext.isSiteWideWeblog(weblog.getHandle())) {
                pageId = "templates/feeds/site-"+feedRequest.getType()+"-"+feedRequest.getFormat()+".vm";
            } else {
                pageId = "templates/feeds/weblog-"+feedRequest.getType()+"-"+feedRequest.getFormat()+".vm";
            }
            
            // populate the rendering model
            Map initData = new HashMap();
            initData.put("request", request);
            initData.put("feedRequest", feedRequest);
            
            // Feeds get the weblog specific page model
            ModelLoader.loadFeedModels(model, initData);
            
            // special handling for site wide feed
            if (rollerContext.isSiteWideWeblog(weblog.getHandle())) {
                ModelLoader.loadSiteModels(model, initData);
            }
            
            // utility helpers and plugin helpers
            ModelLoader.loadUtilityHelpers(model, initData);

            // Feeds get weblog's custom models too
            ModelLoader.loadCustomModels(weblog, model, initData);
            
        } catch (RollerException ex) {
            log.error("ERROR loading model for page", ex);
            
            if(!response.isCommitted()) response.reset();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            return;
        }
        
        
        // lookup Renderer we are going to use
        Renderer renderer = null;
        try {
            log.debug("Looking up renderer");
            renderer = RendererManager.getRenderer("velocity", pageId);
        } catch(Exception e) {
            // nobody wants to render my content :(
            log.error("Couldn't find renderer for page "+pageId, e);
            
            if(!response.isCommitted()) response.reset();
            response.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        
        // render content.  use default size of about 24K for a standard page
        CachedContent rendererOutput = new CachedContent(24567);
        try {
            log.debug("Doing rendering");
            renderer.render(model, rendererOutput.getCachedWriter());
            
            // flush rendered output and close
            rendererOutput.flush();
            rendererOutput.close();
        } catch(Exception e) {
            // bummer, error during rendering
            log.error("Error during rendering for page "+pageId, e);
            
            if(!response.isCommitted()) response.reset();
            response.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        
        
        // post rendering process
        
        // flush rendered content to response
        log.debug("Flushing response output");
        response.setContentLength(rendererOutput.getContent().length);
        response.getOutputStream().write(rendererOutput.getContent());
        
        // cache rendered content.  only cache if user is not logged in?
        log.debug("PUT "+cacheKey);
        this.contentCache.put(cacheKey, new LazyExpiringCacheEntry(rendererOutput));
        
        log.debug("Exiting");
    }

