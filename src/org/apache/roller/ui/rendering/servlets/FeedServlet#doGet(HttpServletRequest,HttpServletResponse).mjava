    /**
     * Handle GET requests for weblog feeds.
     */
    public void doGet(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        
        log.debug("Entering");
        
        // used for rendering
        HashMap model = new HashMap();
        
        RollerRequest rreq = null;
        
        WeblogFeedRequest feedRequest = null;
        try {
            feedRequest = new WeblogFeedRequest(request);
        } catch(Exception e) {
            // some kind of error parsing the request
            log.error("error creating weblog feed request", e);
            response.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        
        // first off lets parse the incoming request and validate it
        // TODO: this is old pre 3.0 stuff which should be removed when possible
        try {
            PageContext pageContext =
                    JspFactory.getDefaultFactory().getPageContext(
                    this, request,  response, "", true, 8192, true);
            
            rreq = RollerRequest.getRollerRequest(pageContext);
            
            // This is an ugly hack to fix the following bug:
            // ROL-547: "Site wide RSS feed is your own if you are logged in"
            String[] pathInfo = StringUtils.split(rreq.getPathInfo(),"/");
            if (pathInfo.length < 1) {
                // If weblog not specified in URL, set it to null
                rreq.setWebsite(null);
            }
            
        } catch (RollerException e) {
            // An error initializing the request is considered to be a 404
            response.sendError(HttpServletResponse.SC_NOT_FOUND);
            log.debug("ERROR initializing RollerRequest", e);
            return;
        }
        
        
        String pageId = null;
        WebsiteData weblog = rreq.getWebsite();
        if (request.getServletPath().endsWith("rss")) {
            
            if (weblog != null) {
                try {
                    // if useer has a custom rss template then use it
                    Template page = weblog.getPageByName("_rss");
                    if(page != null) {
                        pageId = page.getId();
                    }
                } catch (RollerException ex) {
                    // consider this a page not found
                }
            }
            
            if(pageId == null) {
                pageId = "templates/feeds/rss.vm";
            }
        } else if (request.getServletPath().endsWith("atom")) {
            
            if (weblog != null) {
                try {
                    // if user has a custom atom template then use it
                    Template page = weblog.getPageByName("_atom");
                    if(page != null) {
                        pageId = page.getId();
                    }
                } catch (RollerException ex) {
                    // consider this a page not found
                }
            }
            
            if(pageId == null) {
                pageId = "templates/feeds/atom.vm";
            }
        } else if (request.getParameter("flavor") != null) {
            
            // If request specifies a "flavor" then use that.
            String flavor = request.getParameter("flavor");
            pageId = "templates/feeds/" + flavor + ".vm";
        } else {
            
            // Fall through to default RSS page template.
            pageId = "templates/feeds/rss.vm";
        }
            
        
        // 304 if-modified-since checking
        long sinceDate = request.getDateHeader("If-Modified-Since");
        log.debug("since date = "+sinceDate);
        // TODO: need to have way to checking weblog last modified time
        if(weblog.getDateCreated().getTime() <= sinceDate) {
            log.debug("NOT MODIFIED "+request.getRequestURL());
            response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
            return;
        }
        
        // set last-modified date
        // TODO: figure out how to get weblog last modified time
        response.setDateHeader("Last-Modified", weblog.getDateCreated().getTime());
        
        // cached content checking
        String cacheKey = this.CACHE_ID+":"+this.generateKey(feedRequest);
        
        // we need the last expiration time for the given weblog
        long lastExpiration = 0;
        Date lastExpirationDate =
                (Date) CacheManager.getLastExpiredDate(feedRequest.getWeblogHandle());
        if(lastExpirationDate != null)
            lastExpiration = lastExpirationDate.getTime();
        
        LazyExpiringCacheEntry entry =
                (LazyExpiringCacheEntry) this.contentCache.get(cacheKey);
        if(entry != null) {
            CachedContent cachedContent = (CachedContent) entry.getValue(lastExpiration);
            
            if(cachedContent != null) {
                log.debug("HIT "+cacheKey);
                this.hits++;
                
                response.setContentLength(cachedContent.getContent().length);
                response.getOutputStream().write(cachedContent.getContent());
                return;
                
            } else {
                log.debug("HIT-EXPIRED "+cacheKey);
            }
            
        } else {
            log.debug("MISS "+cacheKey);
            this.misses++;
        }

        
        // looks like we need to render content
        try {
            // get update time before loading context
            // TODO: this should really be handled elsewhere
            WeblogManager wmgr = RollerFactory.getRoller().getWeblogManager();
            String catname = request.getParameter(RollerRequest.WEBLOGCATEGORYNAME_KEY);
            Date updateTime = wmgr.getWeblogLastPublishTime(rreq.getWebsite(), catname);
            request.setAttribute("updateTime", updateTime);
            
            // populate the model
            ModelLoader.loadFeedModels(rreq.getWebsite(), request, response, model);
            
        } catch (RollerException ex) {
            log.error("ERROR loading model for page", ex);
            
            if(!response.isCommitted()) response.reset();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            return;
        }
        
        
        // lookup Renderer we are going to use
        Renderer renderer = null;
        try {
            log.debug("Looking up renderer");
            renderer = RendererManager.getRenderer("velocity", pageId);
        } catch(Exception e) {
            // nobody wants to render my content :(
            log.error("Couldn't find renderer for page "+pageId, e);
            
            if(!response.isCommitted()) response.reset();
            response.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        
        // render content.  use default size of about 24K for a standard page
        CachedContent rendererOutput = new CachedContent(24567);
        try {
            log.debug("Doing rendering");
            renderer.render(model, rendererOutput.getCachedWriter());
            
            // flush rendered output and close
            rendererOutput.flush();
            rendererOutput.close();
        } catch(Exception e) {
            // bummer, error during rendering
            log.error("Error during rendering for page "+pageId, e);
            
            if(!response.isCommitted()) response.reset();
            response.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }
        
        
        // post rendering process
        
        // flush rendered content to response
        log.debug("Flushing response output");
        response.setContentLength(rendererOutput.getContent().length);
        response.getOutputStream().write(rendererOutput.getContent());
        
        // cache rendered content.  only cache if user is not logged in?
        log.debug("PUT "+cacheKey);
        this.contentCache.put(cacheKey, new LazyExpiringCacheEntry(rendererOutput));
        
        log.debug("Exiting");
    }

