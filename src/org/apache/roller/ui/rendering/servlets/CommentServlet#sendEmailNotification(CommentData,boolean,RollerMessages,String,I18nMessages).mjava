    /**
     * Send email notification of new or newly approved comment.
     * TODO: Make the addressing options configurable on a per-website basis.
     *
     * @param commentObject      The new comment
     * @param notifySubscribers  True if subscribers are to be notified
     * @param messages           Messages to be included in e-mail (or null). 
     *                           Errors will be assumed to be "validation errors" 
     *                           and messages will be assumed to be "from the system"
     * @param rootURL            Root URL of the Roller site
     */
    public static void sendEmailNotification(
            CommentData commentObject, boolean notifySubscribers,
            RollerMessages messages, String rootURL, I18nMessages resources) {
        
        WeblogEntryData entry = commentObject.getWeblogEntry();
        WebsiteData site = entry.getWebsite();
        UserData user = entry.getCreator();
        
        // Send e-mail to owner and subscribed users (if enabled)
        boolean notify = RollerRuntimeConfig.getBooleanProperty("users.comments.emailnotify");
        if (notify && site.getEmailComments().booleanValue()) {
            log.debug("Comment notification enabled ... preparing email");
            
            // Determine message and addressing options from init parameters
            boolean hideCommenterAddrs = RollerConfig.getBooleanProperty(
                    "comment.notification.hideCommenterAddresses");
            
            //------------------------------------------
            // --- Determine the "from" address
            // --- Use either the site configured from address or the user's address
            
            String from =
                    (StringUtils.isEmpty(site.getEmailFromAddress()))
                    ? user.getEmailAddress()
                    : site.getEmailFromAddress();
            
            //------------------------------------------
            // --- Build list of email addresses to send notification to
            
            List comments = entry.getComments(true, true);
            
            Set subscribers = new TreeSet();
            
            // If we are to notify subscribers, then...
            if (notifySubscribers) {
                log.debug("Sending notification email to all subscribers");
                
                // Get all the subscribers to this comment thread
                for (Iterator it = comments.iterator(); it.hasNext();) {
                    CommentData comment = (CommentData) it.next();
                    if (!StringUtils.isEmpty(comment.getEmail())) {
                        // If user has commented twice,
                        // count the most recent notify setting
                        if (comment.getNotify().booleanValue()) {
                            // only add those with valid email
                            if (comment.getEmail().matches(EMAIL_ADDR_REGEXP)) {
                                subscribers.add(comment.getEmail());
                            }
                        } else {
                            // remove user who doesn't want to be notified
                            subscribers.remove(comment.getEmail());
                        }
                    }
                }
            } else {
                log.debug("Sending notification email only to weblog owner");
            }
            
            // Form array of commenter addrs
            String[] commenterAddrs = (String[])subscribers.toArray(new String[0]);
            
            //------------------------------------------
            // --- Form the messages to be sent -
            // Build separate owner and commenter (aka subscriber) messages
            
            // Determine with mime type to use for e-mail
            StringBuffer msg = new StringBuffer();
            StringBuffer ownermsg = new StringBuffer();
            boolean escapeHtml = RollerRuntimeConfig.getBooleanProperty("users.comments.escapehtml");
            
            // first the commenter message
            
            if (!escapeHtml) {
                msg.append("<html><body style=\"background: white; ");
                msg.append(" color: black; font-size: 12px\">");
            }
            
            if (!StringUtils.isEmpty(commentObject.getName())) {
                msg.append(commentObject.getName() + " "
                        + resources.getString("email.comment.wrote")+": ");
            } else {
                msg.append(resources.getString("email.comment.anonymous")+": ");
            }
            
            msg.append((escapeHtml) ? "\n\n" : "<br /><br />");
            
            msg.append((escapeHtml) ? Utilities.escapeHTML(commentObject.getContent())
            : UtilitiesModel.transformToHTMLSubset(Utilities.escapeHTML(commentObject.getContent())));
            
            msg.append((escapeHtml) ? "\n\n----\n"
                    : "<br /><br /><hr /><span style=\"font-size: 11px\">");
            msg.append(resources.getString("email.comment.respond") + ": ");
            msg.append((escapeHtml) ? "\n" : "<br />");
            
            // Build link back to comment
            StringBuffer commentURL = new StringBuffer(rootURL);
            commentURL.append(entry.getPermaLink());
            commentURL.append("#comments");
            
            if (escapeHtml) {
                msg.append(commentURL.toString());
            } else {
                msg.append("<a href=\""+commentURL+"\">"+commentURL+"</a></span>");
            }
            
            // next the owner message
            
            // First, list any messages from the system that were passed in:
            if (messages.getMessageCount() > 0) {
                ownermsg.append((escapeHtml) ? "" : "<p>");
                ownermsg.append(resources.getString("commentServlet.email.thereAreSystemMessages"));
                ownermsg.append((escapeHtml) ? "\n\n" : "</p>");
                ownermsg.append((escapeHtml) ? "" : "<ul>");
            }
            for (Iterator it = messages.getMessages(); it.hasNext();) {
                RollerMessage rollerMessage = (RollerMessage)it.next();
                ownermsg.append((escapeHtml) ? "" : "<li>");
                ownermsg.append(MessageFormat.format(resources.getString(rollerMessage.getKey()), (Object[])rollerMessage.getArgs()) );
                ownermsg.append((escapeHtml) ? "\n\n" : "</li>");
            }
            if (messages.getMessageCount() > 0) {
                ownermsg.append((escapeHtml) ? "\n\n" : "</ul>");
            }
            
            // Next, list any validation error messages that were passed in:
            if (messages.getErrorCount() > 0) {
                ownermsg.append((escapeHtml) ? "" : "<p>");
                ownermsg.append(resources.getString("commentServlet.email.thereAreErrorMessages"));
                ownermsg.append((escapeHtml) ? "\n\n" : "</p>");
                ownermsg.append((escapeHtml) ? "" : "<ul>");
            }
            for (Iterator it = messages.getErrors(); it.hasNext();) {
                RollerMessage rollerMessage = (RollerMessage)it.next();
                ownermsg.append((escapeHtml) ? "" : "<li>");
                ownermsg.append(MessageFormat.format(resources.getString(rollerMessage.getKey()), (Object[])rollerMessage.getArgs()) );
                ownermsg.append((escapeHtml) ? "\n\n" : "</li>");
            }
            if (messages.getErrorCount() > 0) {
                ownermsg.append((escapeHtml) ? "\n\n" : "</ul>");
            }
            
            ownermsg.append(msg);
            
            // add link to weblog edit page so user can login to manage comments
            ownermsg.append((escapeHtml) ? "\n\n----\n" :
                "<br /><br /><hr /><span style=\"font-size: 11px\">");
            ownermsg.append("Link to comment management page:");
            ownermsg.append((escapeHtml) ? "\n" : "<br />");
            
            StringBuffer deleteURL = new StringBuffer(rootURL);
            deleteURL.append("/roller-ui/authoring/comments.rol?entryId=" + entry.getId());
            
            if (escapeHtml) {
                ownermsg.append(deleteURL.toString());
            } else {
                ownermsg.append(
                        "<a href=\"" + deleteURL + "\">" + deleteURL + "</a></span>");
                msg.append("</Body></html>");
                ownermsg.append("</Body></html>");
            }
            
            String subject = null;
            if ((subscribers.size() > 1) ||
                    (StringUtils.equals(commentObject.getEmail(), user.getEmailAddress()))) {
                subject= "RE: "+resources.getString("email.comment.title")+": ";
            } else {
                subject = resources.getString("email.comment.title") + ": ";
            }
            subject += entry.getTitle();
            
            //------------------------------------------
            // --- Send message to email recipients
            try {
                Context ctx = (Context)
                new InitialContext().lookup("java:comp/env");
                Session session = (Session)ctx.lookup("mail/Session");
                boolean isHtml = !escapeHtml;
                // Send separate messages to owner and commenters
                sendMessage(session, from,
                        new String[]{user.getEmailAddress()}, null, null, subject, ownermsg.toString(), isHtml);
                if (notifySubscribers && commenterAddrs.length > 0) {
                    // If hiding commenter addrs, they go in Bcc: otherwise in the To: of the second message
                    String[] to = hideCommenterAddrs ? null : commenterAddrs;
                    String[] bcc = hideCommenterAddrs ? commenterAddrs : null;
                    sendMessage(session, from, to, null, bcc, subject, msg.toString(), isHtml);

                }
            } catch (NamingException ne) {
                log.error("Unable to lookup mail session.  Check configuration.  NamingException: " + ne.getMessage());
            } catch (Exception e) {
                log.warn("Exception sending comment mail: " + e.getMessage());
                // This will log the stack trace if debug is enabled
                if (log.isDebugEnabled()) {
                    log.debug(e);
                }
            }
            
            log.debug("Done sending email message");
            
        } // if email enabled
    }

