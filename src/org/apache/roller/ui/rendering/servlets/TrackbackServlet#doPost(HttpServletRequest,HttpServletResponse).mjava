    /**
     * Service incoming POST requests.
     *
     * Here we handle incoming trackback posts.
     */
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        String error = null;
        PrintWriter pw = response.getWriter();
        
        String url = request.getParameter(TRACKBACK_URL_PARAM);
        String title = request.getParameter(TRACKBACK_TITLE_PARAM);
        String excerpt = request.getParameter(TRACKBACK_EXCERPT_PARAM);
        String blogName = request.getParameter(TRACKBACK_BLOG_NAME_PARAM);
        
        if ((title == null) || "".equals(title)) {
            title = url;
        }
        
        if (excerpt == null) {
            excerpt = "";
        } else {
            if (excerpt.length() >= 255) {
                excerpt = excerpt.substring(0, 252);
                excerpt += "...";
            }
        }
        
        
        if(!RollerRuntimeConfig.getBooleanProperty("users.trackbacks.enabled")) {
            error = "Trackbacks are disabled for this site";
        } else if (title==null || url==null || excerpt==null || blogName==null) {
            error = "title, url, excerpt, and blog_name not specified.";
        }
        
        if(error != null) {
            pw.println(this.getErrorResponse(error));
            return;
        }
        
        boolean verified = true;
        try {
            RollerRequest rreq = RollerRequest.getRollerRequest(request);
            WeblogEntryData entry = rreq.getWeblogEntry();
            WebsiteData website = entry.getWebsite();
            boolean siteAllows = website.getAllowComments().booleanValue();
            
            if (entry!=null && siteAllows && entry.getCommentsStillAllowed()) {
                
                // Track trackbacks as comments
                CommentData comment = new CommentData();
                comment.setContent("[Trackback] "+excerpt);
                comment.setName(blogName);
                comment.setUrl(url);
                comment.setWeblogEntry(entry);
                comment.setNotify(Boolean.FALSE);
                comment.setPostTime(new Timestamp(new Date().getTime()));
                
                // If comment contains blacklisted text, mark as spam
                SpamChecker checker = new SpamChecker();
                if (checker.checkTrackback(comment)) {
                    comment.setSpam(Boolean.TRUE);
                    logger.debug("Trackback blacklisted: "+comment.getUrl());
                    error = "REJECTED: trackback contains spam words";
                }
                // Else, if trackback verification is on...
                else if (RollerRuntimeConfig.getBooleanProperty(
                        "site.trackbackVerification.enabled")) {
                    
                    // ...ensure trackbacker actually links to us
                    RollerContext rctx= RollerContext.getRollerContext();
                    String absurl = rctx.getAbsoluteContextUrl(request);
                    LinkbackExtractor linkback = new LinkbackExtractor(
                            comment.getUrl(), absurl + entry.getPermaLink());
                    if (linkback.getExcerpt() == null) {
                        comment.setPending(Boolean.TRUE);
                        comment.setApproved(Boolean.FALSE);
                        verified = false;
                        // if we can't verify trackback, then reject it
                        error = "REJECTED: trackback failed verification";
                        logger.debug("Trackback failed verification: "+comment.getUrl());
                    }
                }
                
                if (error == null) {
                    // If comment moderation is on, set comment as pending
                    if (verified && website.getCommentModerationRequired()) {
                        comment.setPending(Boolean.TRUE);
                        comment.setApproved(Boolean.FALSE);
                    } else if (verified) {
                        comment.setPending(Boolean.FALSE);
                        comment.setApproved(Boolean.TRUE);
                    }
                    
                    // save, commit, send response
                    WeblogManager mgr = RollerFactory.getRoller().getWeblogManager();
                    mgr.saveComment(comment);
                    RollerFactory.getRoller().flush();
                    
                    // Clear all caches associated with comment
                    CacheManager.invalidate(comment);
                    
                    // Send email notifications
                    RollerContext rc = RollerContext.getRollerContext();
                    String rootURL = rc.getAbsoluteContextUrl(request);
                    if (rootURL == null || rootURL.trim().length()==0) {
                        rootURL = RequestUtils.serverURL(request) + request.getContextPath();
                    }
                    CommentServlet.sendEmailNotification(comment, rootURL);
                    
                    if(comment.getPending().booleanValue()) {
                        pw.println(this.getSuccessResponse("Trackback submitted to moderator"));
                    } else {
                        pw.println(this.getSuccessResponse("Trackback accepted"));
                    }
                }
                
            } else if (entry!=null) {
                error = "Comments and Trackbacks are disabled for the entry you specified.";
            } else {
                error = "Entry not specified.";
            }
            
        } catch (Exception e) {
            error = e.getMessage();
            if ( error == null ) {
                error = e.getClass().getName();
            }
        }
        
        if(error!= null) {
            pw.println(this.getErrorResponse(error));
        }
        
    }

