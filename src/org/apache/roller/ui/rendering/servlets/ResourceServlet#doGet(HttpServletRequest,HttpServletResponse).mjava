    /**
     * Handles requests for user uploaded resources.
     */
    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        String context = request.getContextPath();
        String servlet = request.getServletPath();
        String reqURI = request.getRequestURI();

        // URL decoding

        // Fix for ROL-1065: even though a + should mean space in a URL, folks 
        // who upload files with plus signs expect them to work without 
        // escaping. This is essentially what other systems do (e.g. JIRA) to 
        // enable this.
        reqURI = reqURI.replaceAll("\\+", "%2B");

        // now we really decode the URL
        reqURI = URLDecoder.decode(reqURI, "UTF-8");

        // calculate the path of the requested resource
        // we expect ... /<context>/<servlet>/path/to/resource
        String reqResource = reqURI.substring(servlet.length() + context.length());

        // now we can formulate the *real* path to the resource on the filesystem
        String resource_path = this.upload_dir + reqResource;
        File resource = new File(resource_path);

        log.debug("Resource requested ["+reqURI+"]");
        log.debug("Real path is ["+resource.getAbsolutePath()+"]");

        // do a quick check to make sure the resource exits, otherwise 404
        if(!resource.exists() || !resource.canRead() || resource.isDirectory()) {
            response.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }

        // make sure someone isn't trying to sneek outside the uploads dir
        File uploadDir = new File(this.upload_dir);
        if(!resource.getCanonicalPath().startsWith(uploadDir.getCanonicalPath())) {
            response.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }

        // Respond with 304 Not Modified if it is not modified.
        if (ModDateHeaderUtil.respondIfNotModified(request,response, resource.lastModified())) {
            return;
        }

        // set last-modified date
        ModDateHeaderUtil.setLastModifiedHeader(response,resource.lastModified());

        // set the content type based on whatever is in our web.xml mime defs
        response.setContentType(this.context.getMimeType(resource.getAbsolutePath()));

        // ok, lets serve up the file
        byte[] buf = new byte[8192];
        int length = 0;
        OutputStream out = response.getOutputStream();
        InputStream resource_file = new FileInputStream(resource);
        while((length = resource_file.read(buf)) > 0)
            out.write(buf, 0, length);

        // cleanup
        out.close();
        resource_file.close();
    }

