    /**
     * Setup the a Velocity context by loading it with objects, values, and
     * RollerPagePlugins needed for Roller page execution.
     */
    public static void setupContext(
            Context ctx, 
            RollerRequest rreq, 
            HttpServletResponse response )
            throws RollerException {
        
        mLogger.debug("setupContext( ctx = "+ctx+")");
        
        HttpServletRequest request = rreq.getRequest();
        RollerContext rollerCtx = RollerContext.getRollerContext( );
        
        try {
            // Add page model object to context
            String pageModelClassName =
                RollerConfig.getProperty("velocity.pagemodel.classname");
            Class pageModelClass = Class.forName(pageModelClassName);
            PageModel pageModel = (PageModel)pageModelClass.newInstance();
            pageModel.init(rreq);
            ctx.put("pageModel", pageModel );
            ctx.put("pages", pageModel.getPages());
        } catch (Exception e) {
            throw new RollerException("ERROR creating Page Model",e);
        }
        
        // Add Velocity page helper to context
        PageHelper pageHelper = new PageHelper(request, response, ctx);
        Roller roller = RollerFactory.getRoller();
        ctx.put("pageHelper", pageHelper);
                
        // Load standard Roller objects and values into the context
        WebsiteData website = 
            loadWeblogValues(ctx, rreq, rollerCtx );
        loadPathValues(       ctx, rreq, rollerCtx, website );
        loadRssValues(        ctx, rreq, website );
        loadUtilityObjects(   ctx, rreq, rollerCtx, website );
        loadRequestParamKeys( ctx);
        loadStatusMessage(    ctx, rreq );
        
        // If single entry is specified, load comments too
        if ( rreq.getWeblogEntry() != null ) {
            loadCommentValues( ctx, rreq, rollerCtx );
        }
        
        // add Velocity Toolbox tools to context
        loadToolboxContext(request, response, ctx);
    }

