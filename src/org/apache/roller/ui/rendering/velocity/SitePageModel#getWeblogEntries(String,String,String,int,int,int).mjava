    /**
     * Get most recent WeblogEntry objects across all weblogs,
     * in reverse chrono order by pubTime.
     * @param handle    Restrict to this weblog handle (or 'nil' for all)
     * @param userName  Restrict to this userName (or 'nil' for all)
     * @param cat       Restrict to category (or 'nil' for all)
     * @param offset    Offset into results (for paging)
     * @param length    Max number of results to return
     */
    public List getWeblogEntries(String handle, String userName, String cat, int sinceDays, int offset, int length) {
        List results = new ArrayList();
        if (handle.equals(PageModel.VELOCITY_NULL)) handle = null;
        if (userName.equals(PageModel.VELOCITY_NULL)) userName = null;
        if (cat.equals(PageModel.VELOCITY_NULL)) cat = null;
        Calendar cal = Calendar.getInstance();
        cal.setTime(new Date());
        cal.add(Calendar.DATE, -1 * sinceDays);
        Date startDate = cal.getTime();
        try {            
            Roller roller = RollerFactory.getRoller();
            WeblogManager wmgr = roller.getWeblogManager();
            UserManager umgr = roller.getUserManager();
            WebsiteData website = null;
            if (handle != null) {
                website = umgr.getWebsiteByHandle(handle);
            }
            UserData user = null;
            if (userName != null) {
                user = umgr.getUserByUserName(userName);
            }
            List entries = wmgr.getWeblogEntries( 
                website, user, startDate, new Date(), cat, WeblogEntryData.PUBLISHED, "pubTime", offset, length);
            for (Iterator it = entries.iterator(); it.hasNext();) {
                WeblogEntryData entry = (WeblogEntryData) it.next();
                results.add(WeblogEntryDataWrapper.wrap(entry));
            }
        } catch (Exception e) {
            log.error("ERROR: fetching weblog list", e);
        }
        return results;
    }

