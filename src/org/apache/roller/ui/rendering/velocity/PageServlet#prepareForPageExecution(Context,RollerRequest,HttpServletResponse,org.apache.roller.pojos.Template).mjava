    /**
     * Prepare the requested page for execution by setting content type
     * and populating velocity context.
     */
    protected Template prepareForPageExecution(Context ctx,
                                            RollerRequest rreq,
                                            HttpServletResponse response,
                                            org.apache.roller.pojos.Template page) 
            
         throws ResourceNotFoundException, RollerException {
        
        Template outty = null;
        
        // if page has an extension - use that to set the contentType
        String pageLink = page.getLink();
        String mimeType = getServletConfig().getServletContext().getMimeType(pageLink);
        if(mimeType != null) {
            // we found a match ... set the content type
            response.setContentType(mimeType);
        }
        
        // Made it this far, populate the Context
        Map mapCtx = new HashMap();
        ContextLoader.setupContext(mapCtx, rreq.getRequest(), response, rreq.getPageContext());
        
        // hack.  put mapCtx info velocity ctx
        String key = null;
        Iterator ctxIT = mapCtx.keySet().iterator();
        while(ctxIT.hasNext()) {
            key = (String) ctxIT.next();
            
            ctx.put(key, mapCtx.get(key));
        }
        
        try {
            outty = getTemplate(page.getId(), "UTF-8");
        } 
        catch (ParseErrorException parseError) {            
            // Error at this point indicates error in template, so let's show 
            // it to the template author so they can debug it.
            ctx.put("displayException", parseError);
            try {
                outty = getTemplate("templates/error-page.vm", "UTF-8");
            } catch (Throwable totallyUnexpected) {
                throw new RuntimeException("ERROR parsing Velocity error page");
            }
        } 
        catch (ResourceNotFoundException notFound) {
            // just rethrow
            throw notFound;
        } 
        catch (Exception ex) { 
            // wrap this as a roller exception
            throw new RollerException("ERROR getting velocity template", ex);            
        }        
        return outty;
    }

