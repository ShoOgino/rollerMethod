    /**
     * Initialize PageModel and allow PageModel to initialized VelocityContext.
     */
    public void init(HttpServletRequest request) {
        
        mRequest = request;
        
        WeblogPageRequest pageRequest = null;
        try {
            pageRequest = new WeblogPageRequest(request);
        } catch(Exception e) {
            // this should never happen because the old page model
            // is only supposed to be use on weblog pages
            mLogger.error("error parsing request", e);
        }
        
        RollerRequest mRollerReq = RollerRequest.getRollerRequest(request);
        mWebsite = mRollerReq.getWebsite();
        mHandle = mWebsite.getHandle();
        mEntry = mRollerReq.getWeblogEntry();
        mCategory = mRollerReq.getWeblogCategory();
        mDate = mRollerReq.getDate();
        mIsDaySpecified = mRollerReq.isDaySpecified();
        mIsMonthSpecified = mRollerReq.isMonthSpecified();
        
        try {
            mBookmarkMgr = RollerFactory.getRoller().getBookmarkManager();
            mRefererMgr  = RollerFactory.getRoller().getRefererManager();
            mUserMgr     = RollerFactory.getRoller().getUserManager();
            mWeblogMgr   = RollerFactory.getRoller().getWeblogManager();
            
            // Preload what we can for encapsulation.  What we cannot preload we
            // will use the Managers later to fetch.
            
            // Get the pages, put into context & load map
            if (mWebsite != null) {
                
                // Get the pages, put into context & load map
                List pages = mWebsite.getPages();
                Iterator pageIter = pages.iterator();
                while (pageIter.hasNext()) {
                    Template page = (Template) pageIter.next();
                    mPageMap.put(page.getName(), TemplateWrapper.wrap(page));
                }
            }
            
        } catch (RollerException e) {
            mLogger.error("PageModel Roller get*Manager Exception", e);
        }
    }

