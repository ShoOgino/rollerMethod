    public List getItems() {
        
        if (entries == null) {
            // calculate offset
            int offset = getPage() * length;
            
            Date startDate = null;
            if(sinceDays > 0) {
                Calendar cal = Calendar.getInstance();
                cal.setTime(new Date());
                cal.add(Calendar.DATE, -1 * sinceDays);
                startDate = cal.getTime();
            }
            
            List results = new ArrayList();
            try {
                PlanetManager planetManager = PlanetFactory.getPlanet().getPlanetManager();
                
                List rawEntries = null;
                if (feedURL != null) {
                    PlanetSubscriptionData sub = planetManager.getSubscription(feedURL);
                    rawEntries = planetManager.getEntries(sub, offset, length+1);
                } else if (groupHandle != null) {
                    PlanetData planet = planetManager.getPlanet("zzz_default_planet_zzz");
                    PlanetGroupData group = planetManager.getGroup(planet, groupHandle);
                    rawEntries = planetManager.getEntries(Collections.singletonList(group), startDate, null, offset, length+1);
                } else {
                    PlanetData planet = planetManager.getPlanet("zzz_default_planet_zzz");
                    PlanetGroupData groupAll = planetManager.getGroup(planet, "all");
                    PlanetGroupData groupDefault = planetManager.getGroup(planet, "default");
                    List groups = new ArrayList();
                    groups.add(groupAll);
                    groups.add(groupDefault);
                    rawEntries = planetManager.getEntries(groups, startDate, null, offset, length+1);
                }
                
                // check if there are more results for paging
                if(rawEntries.size() > length) {
                    more = true;
                    rawEntries.remove(rawEntries.size() - 1);
                }
                
                // wrap 'em
                for (Iterator it = rawEntries.iterator(); it.hasNext();) {
                    PlanetEntryData entry = (PlanetEntryData) it.next();
                    // TODO needs pojo wrapping from planet
                    results.add(entry);
                }
                
            } catch (Exception e) {
                log.error("ERROR: get aggregation", e);
            }
            
            entries = results;
        }
        
        return entries;
    }

