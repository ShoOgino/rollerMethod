    //-----------------------------------------------------------------------
    /**
     * Show query for user page or, if userName specified in request,
     * show the admin user page for the specified user.
     */
    public ActionForward edit(
            ActionMapping       mapping,
            ActionForm          actionForm,
            HttpServletRequest  request,
            HttpServletResponse response)
            throws IOException, ServletException {
        ActionForward forward = mapping.findForward("adminUser.page");
        try {
            UserData user = null;
            RollerRequest rreq = RollerRequest.getRollerRequest(request);
            RollerSession rollerSession = RollerSession.getRollerSession(request);
            if (rollerSession.isGlobalAdminUser() ) {
                UserAdminForm userForm = (UserAdminForm)actionForm;
                UserManager mgr = RollerFactory.getRoller().getUserManager();
                if (userForm!=null
                        && userForm.getUserName()!=null && !userForm.isNewUser()) {
                    ActionMessages msgs = getErrors(request);
                    msgs = (msgs == null) ? new ActionMessages() : msgs;
                    user = mgr.getUserByUserName(userForm.getUserName(), null);
                    if (user != null) {
                        userForm.copyFrom(user, request.getLocale());
                        // User must set new password twice
                        userForm.setPasswordText(null);
                        userForm.setPasswordConfirm(null);
                    } else {
                        msgs.add(ActionErrors.GLOBAL_ERROR,
                                new ActionMessage("userAdmin.invalidNewUserName"));
                        userForm.setUserName("");
                    }
                    if (request.getSession().getAttribute("cookieLogin")!=null) {
                        // TODO: make it possible to change passwords
                        // regardless of remember me
                        msgs.add(ActionErrors.GLOBAL_ERROR,
                                new ActionMessage("userAdmin.cookieLogin"));
                    }
                    saveErrors(request, msgs);
                }
                request.setAttribute("model", new UserAdminPageModel(
                        request, response, mapping, userForm, user));
            } else {
                forward = mapping.findForward("access-denied");
            }
        } catch (Exception e) {
            mLogger.error("ERROR in action",e);
            throw new ServletException(e);
        }
        return forward;
    }

