    /* (non-Javadoc)
     * @see org.apache.roller.model.WeblogManager#getPopularTags(org.apache.roller.pojos.WebsiteData, java.util.Date, int)
     */
    public List getPopularTags(Weblog website, Date startDate, int limit)
            throws RollerException {
        try {
            Session session = ((HibernatePersistenceStrategy) strategy)
                    .getSession();

            ArrayList params = new ArrayList();
            StringBuffer queryString = new StringBuffer();
            queryString.append("select name, sum(total) ");
            queryString.append("from WeblogEntryTagAggregate where ");
            if (website != null) {
                queryString.append("weblog.id = ? ");
                params.add(website.getId());
            } else {
                queryString.append("weblog = NULL ");
            }
            if (startDate != null) {
                queryString.append("and lastUsed >= ? ");
                params.add(startDate);
            }

            queryString.append("group by name, total order by total desc");

            Query query = session.createQuery(queryString.toString());
            if (limit > 0)
                query.setMaxResults(limit);

            // set params
            for (int i = 0; i < params.size(); i++) {
                query.setParameter(i, params.get(i));
            }

            double min = Integer.MAX_VALUE;
            double max = Integer.MIN_VALUE;

            List results = new ArrayList(limit);
            
            for (Iterator iter = query.list().iterator(); iter.hasNext();) {
                Object[] row = (Object[]) iter.next();
                TagStat t = new TagStat();
                t.setName((String) row[0]);
                t.setCount(((Number) row[1]).intValue());                
                
                min = Math.min(min, t.getCount());
                max = Math.max(max, t.getCount());                
                results.add(t);
            }
            
            min = Math.log(1+min);
            max = Math.log(1+max);

            double range = Math.max(.01, max - min) * 1.0001;
            
            for (Iterator iter = results.iterator(); iter.hasNext(); )
            {
                TagStat t = (TagStat) iter.next();
                t.setIntensity((int) (1 + Math.floor(5 * (Math.log(1+t.getCount()) - min) / range)));
            }            

            // sort results by name, because query had to sort by total
            Collections.sort(results, tagStatComparator);
            
            return results;

        } catch (HibernateException e) {
            throw new RollerException(e);
        }
    }

