    /**
     * Store hierarchical object.
     *
     * NOTE: if the object has proper cascade setting then is all this necessary?
     */
    public void store(HierarchicalPersistentObject obj) 
            throws HibernateException, RollerException {
        
        if(obj == null) {
            throw new HibernateException("Cannot save null object");
        }
        
        log.debug("Storing hierarchical object "+obj);
        
        Session session = getSession();
        
        HierarchicalPersistentObject mNewParent = obj.getNewParent();
        boolean fresh = (obj.getId() == null || "".equals(obj.getId()));
        
        if (fresh) {
            // Object has never been written to database, so save it.
            // This makes obj into a persistent instance.
            session.save(obj);
        }
 
        if(!session.contains(obj)) {
            
            // Object has been written to database, but instance passed in
            // is not a persistent instance, so must be loaded into session.
            HierarchicalPersistentObject vo =
                    (HierarchicalPersistentObject)session.load(obj.getClass(),obj.getId());
            vo.setData(obj);
            obj = vo;
        }
        
        if (fresh) {
            // Every fresh cat needs a parent assoc
            Assoc parentAssoc = obj.createAssoc(
                    obj, mNewParent, Assoc.PARENT);
            this.store(parentAssoc);
        } else if (null != mNewParent) {
            // New parent must be added to parentAssoc
            Assoc parentAssoc = obj.getParentAssoc();
            if(parentAssoc == null)
                log.error("parent assoc is null");
            parentAssoc.setAncestor(mNewParent);
            this.store(parentAssoc);
        }
        
        // Clear out existing grandparent associations
        Iterator ancestors = obj.getAncestorAssocs().iterator();
        while (ancestors.hasNext()) {
            Assoc assoc = (Assoc)ancestors.next();
            if (assoc.getRelation().equals(Assoc.GRANDPARENT)) {
                this.remove(assoc);
            }
        }
        
        // Walk parent assocations, creating new grandparent associations
        int count = 0;
        Assoc currentAssoc = obj.getParentAssoc();
        while (null != currentAssoc.getAncestor()) {
            if (count > 0) {
                Assoc assoc = obj.createAssoc(obj,
                        currentAssoc.getAncestor(),
                        Assoc.GRANDPARENT);
                this.store(assoc);
            }
            currentAssoc = currentAssoc.getAncestor().getParentAssoc();
            count++;
        }
        
        Iterator children = obj.getChildAssocs().iterator();
        while (children.hasNext()) {
            Assoc assoc = (Assoc) children.next();
            
            // resetting parent will cause reset of ancestors links
            assoc.getObject().setParent(obj);
            
            // recursively...
            this.store(assoc.getObject());
        }
        
        // Clear new parent now that new parent has been saved
        mNewParent = null;
    }

