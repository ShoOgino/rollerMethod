    /**
     * Try to aquire a lock for a given RollerTask.
     */
    public boolean registerLease(RollerTask task) {
        
        // query for existing lease record first
        TaskLockData taskLock = null;
        try {
            taskLock = this.getTaskLockByName(task.getName());
            
            if(taskLock == null) {
                // insert an empty record, then we will actually acquire the
                // lease below using an update statement 
                taskLock = new TaskLockData();
                taskLock.setName(task.getName());
                taskLock.setTimeAquired(new Date(0));
                taskLock.setTimeLeased(0);
                
                // save it and flush
                this.saveTaskLock(taskLock);
                RollerFactory.getRoller().flush();
            }
            
        } catch (RollerException ex) {
            log.warn("Error getting or inserting TaskLockData", ex);
            return false;
        }
        
        // try to acquire lease
        try {
            // calculate lease expiration time
            // expireTime = startTime + (timeLeased * 60sec/min) - 1 sec
            // we remove 1 second to adjust for precision differences
            long leaseExpireTime = taskLock.getTimeAquired().getTime()+
                    (60000*taskLock.getTimeLeased())-1000;
            
            Session session = ((HibernatePersistenceStrategy)this.strategy).getSession();
            String queryHQL = "update TaskLockData "+
                    "set client=:client, timeacquired=current_timestamp(), timeleased=:timeleased "+
                    "where name=:name and timeacquired=:timeacquired "+
                    "and :leaseends < current_timestamp()";
            Query query = session.createQuery(queryHQL);
            query.setString("client", task.getClientId());
            query.setInteger("timeleased", task.getLeaseTime());
            query.setString("name", task.getName());
            query.setTimestamp("timeacquired", taskLock.getTimeAquired());
            query.setTimestamp("leaseends", new Date(leaseExpireTime));
            int result = query.executeUpdate();
            
            // this may not be needed
            RollerFactory.getRoller().flush();
            
            if(result == 1) {
                return true;
            }
            
        } catch (Exception e) {
            log.warn("Error obtaining lease, assuming race condition.", e);
            return false;
        }
        
        return false;
    }

