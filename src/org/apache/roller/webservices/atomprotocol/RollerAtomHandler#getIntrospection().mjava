    /**
     * Return Atom service document for site, getting blog-name from pathInfo.
     * The workspace will contain collections for entries, categories and resources.
     */
    public AtomService getIntrospection() throws AtomException {
        log.debug("Entering");
        AtomService service = new AtomService();
        List perms = null;
        try {
            perms = roller.getUserManager().getAllPermissions(user);
        } catch (RollerException re) {
            throw new AtomException("Getting user's weblogs", re);
        }
        String accept = null;
        try {
            accept = getAcceptedContentTypeRange();
        } catch (RollerException re) {
            throw new AtomException("Getting site's accept range", re);
        }
        if (perms != null) {
            for (Iterator iter=perms.iterator(); iter.hasNext();) {
                WeblogPermission perm = (WeblogPermission)iter.next();
                String handle = perm.getWebsite().getHandle();
                
                // Create workspace to represent weblog
                Workspace workspace = new Workspace(
                    Utilities.removeHTML(perm.getWebsite().getName()), "text");
                service.addWorkspace(workspace);
                
                // Create collection for entries within that workspace
                Collection entryCol = new Collection("Weblog Entries", "text", 
                    URLUtilities.getAtomProtocolURL(true)+"/"+handle+"/entries");
                entryCol.setAccept("entry");
                try {  
                    // Add fixed categories using scheme that points to 
                    // weblog because categories are weblog specific
                    Categories cats = new Categories();
                    cats.setFixed(true);
                    cats.setScheme(getWeblogCategoryScheme(perm.getWebsite()));
                    List rollerCats = roller.getWeblogManager().getWeblogCategories(perm.getWebsite(), false);
                    for (Iterator it = rollerCats.iterator(); it.hasNext();) {
                        WeblogCategoryData rollerCat = (WeblogCategoryData)it.next();
                        Category cat = new Category();
                        cat.setTerm(rollerCat.getPath().substring(1));
                        cat.setLabel(rollerCat.getName());
                        cats.addCategory(cat);
                    } 
                    entryCol.addCategories(cats);
                    
                    // Add tags as free-form categories using scheme that points
                    // to site because tags can be considered site-wide
                    Categories tags = new Categories();
                    tags.setFixed(false);
                    entryCol.addCategories(tags);
                    
                } catch (Exception e) {
                    throw new AtomException("Fetching weblog categories");
                }                               
                workspace.addCollection(entryCol);

                // Add media collection for upload dir
                Collection uploadCol = new Collection("Media Files", "text", 
                    URLUtilities.getAtomProtocolURL(true)+"/"+handle+"/resources/");
                uploadCol.setAccept(accept);
                workspace.addCollection(uploadCol);

                // And add one media collection for each of weblog's upload sub-directories
                ThemeResource[] dirs;
                try {
                    dirs = roller.getFileManager().getDirectories(perm.getWebsite());
                    for (int i=0; i<dirs.length; i++) {
                        Collection uploadSubCol = new Collection(
                            "Media Files: " + dirs[i].getPath(), "text",
                            URLUtilities.getAtomProtocolURL(true)+"/"+handle+"/resources/" + dirs[i].getPath());
                        uploadSubCol.setAccept(accept);
                        workspace.addCollection(uploadSubCol);
                    }
                } catch (FilePathException fpe) {
                    throw new AtomException("Getting uploads directories information", fpe);
                } catch (FileNotFoundException fnfe) {
                    throw new AtomException("Getting uploads directories information", fnfe);
                }

            }
        }
        log.debug("Exiting");
        return service;
    }

