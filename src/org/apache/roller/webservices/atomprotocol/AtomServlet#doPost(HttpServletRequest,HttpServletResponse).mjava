    //-----------------------------------------------------------------------------
    /**
     * Handles an Atom POST by calling handler to identify URI, reading/parsing
     * data, calling handler and writing results to response.
     */
    protected void doPost(HttpServletRequest req, HttpServletResponse res)
    throws ServletException, IOException {
        log.debug("Entering");
        AtomHandler handler = createAtomRequestHandler(req);
        String userName = handler.getAuthenticatedUsername();
        if (userName != null) {
            String[] pathInfo = getPathInfo(req);
            try {
                if (handler.isCollectionURI(pathInfo)) {
                    
                    if (req.getContentType().startsWith("application/atom+xml")) {

                        // parse incoming entry
                        Entry unsavedEntry = parseEntry(new BufferedReader(
                            new InputStreamReader(
                                req.getInputStream(), "UTF-8")));

                        // call handler to post it
                        Entry savedEntry = handler.postEntry(pathInfo, unsavedEntry);
                        
                        // return member entry URI as location header
                        Iterator links = savedEntry.getOtherLinks().iterator();
                        while (links.hasNext()) {
                            Link link = (Link) links.next();
                            if (link.getRel().equals("edit") || link.getRel() == null) {
                                res.addHeader("Location", link.getHref());
                                break;
                            }
                        }
                        // write entry back out to response
                        res.setStatus(HttpServletResponse.SC_CREATED);
                        res.setContentType("application/atom+xml; charset=utf-8");
                        Writer writer = res.getWriter();
                        serializeEntry(savedEntry, writer);
                        writer.close(); 
                    
                    } else if (req.getContentType() != null) {
                        // get incoming title and slug from HTTP header
                        String title = req.getHeader("Title");
                        String slug = req.getHeader("Slug");

                        // hand input stream off to hander to post file
                        Entry resource = handler.postMedia(
                            pathInfo, title, slug, req.getContentType(), req.getInputStream());
                        
                        res.setStatus(HttpServletResponse.SC_CREATED);
                        com.sun.syndication.feed.atom.Content content = 
                            (com.sun.syndication.feed.atom.Content)resource.getContents().get(0);

                        // return member entry URI as location header
                        Iterator links = resource.getOtherLinks().iterator();
                        while (links.hasNext()) {
                            Link link = (Link) links.next();
                            if (link.getRel().equals("edit") || link.getRel() == null) {
                                res.addHeader("Location", link.getHref());
                                break;
                            }
                        }
                        Writer writer = res.getWriter();
                        serializeEntry(resource, writer);
                        writer.close(); 
                    } else {
                        res.sendError(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE,
                                "No content-type specified in request");
                    }
                    
                } else {
                    res.sendError(HttpServletResponse.SC_NOT_FOUND,
                            "Invalid collection specified in request");
                }
            } catch (AtomException ae) {
                res.sendError(ae.getStatus(), ae.getMessage());
            } catch (Exception e) {
                res.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage());
                log.debug(e);
            }
        } else {
            res.setHeader("WWW-Authenticate", "BASIC realm=\"Roller\"");
            res.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
        }
        log.debug("Exiting");
    }

