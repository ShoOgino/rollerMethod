    /**
     * Creates a file name for a file based on a weblog, title string and a 
     * content-type. 
     * 
     * @param weblog      Weblog for which file name is being created
     * @param title       Title to be used for file name (or null)
     * @param contentType Content type of file (must not be null)
     * 
     * If a title is specified, the method will apply the same create-anchor 
     * logic we use for weblog entries to create a file name based on that
     * title.
     *
     * If title is null, the base file name will be the weblog handle plus a 
     * YYYYMMDDHHSS timestamp. 
     *
     * The extension will be formed by using the part of content type that
     * comes after he slash. 
     *
     * For example:
     *    weblog.handle = "daveblog"
     *    title         = "Port Antonio"
     *    content-type  = "image/jpg"
     * Would result in port_antonio.jpg
     *
     * Another example:
     *    weblog.handle = "daveblog"
     *    title         = null
     *    content-type  = "image/jpg"
     * Might result in daveblog-200608201034.jpg
     */
    private String createFileName(WebsiteData weblog, String title, String contentType) {
        
        if (weblog == null) throw new IllegalArgumentException("weblog cannot be null");
        if (contentType == null) throw new IllegalArgumentException("contentType cannot be null");
        
        String fileName = null;
        
        // Determine the extension based on the contentType
        String[] typeTokens = contentType.split("/");
        String ext = typeTokens[1];
        
        if (title != null && !title.trim().equals("")) {
            
            // Some clients pass file name as title and if that's the case then
            // we should use the title as our file name. But we only want to do
            // that if the title does not obviously lie about the content type.
            MimetypesFileTypeMap mimeMap = new MimetypesFileTypeMap();
            String titleType = mimeMap.getContentType(title);
            String titleExt = null;
            // So first, we determine extension based on title
            // If we can determine the content type from the title, then the
            // title is a valid file name. Now let's figure out the extension.
            if (titleType != null && !titleType.equals("application/octet-stream")) {
                String[] titleTypeTokens = titleType.split("/");
                titleExt = "."+titleTypeTokens[1];
            }
            
            // If title's extension matches contentType extension
            if (titleExt != null && ext != null && titleExt.equals(ext)) {
                // Then title doesn't lie, so use it verbatim as filename
                fileName = title;
            } else {
                // Else build file name based on title
                String base = Utilities.replaceNonAlphanumeric(title, ' ');
                StringTokenizer toker = new StringTokenizer(base);
                String tmp = null;
                int count = 0;
                while (toker.hasMoreTokens() && count < 5) {
                    String s = toker.nextToken();
                    s = s.toLowerCase();
                    tmp = (tmp == null) ? s : tmp + "_" + s;
                    count++;
                }
                fileName = tmp + "." + ext;
            }
            // No title or text, so instead we will use the items date
            // in YYYYMMDD format as the base anchor
        } else {
            SimpleDateFormat sdf = new SimpleDateFormat();
            sdf.applyPattern("yyyyMMddHHSS");
            fileName = weblog.getHandle()+"-"+sdf.format(new Date())+"."+ext;
        }
        
        return fileName;
    }

