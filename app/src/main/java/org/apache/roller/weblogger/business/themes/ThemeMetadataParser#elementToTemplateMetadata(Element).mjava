	private ThemeMetadataTemplate elementToTemplateMetadata(Element element)
			throws ThemeParsingException {

		ThemeMetadataTemplate template = new ThemeMetadataTemplate();

		template.setName(element.getChildText("name"));
		template.setDescription(element.getChildText("description"));
		template.setLink(element.getChildText("link"));
		template.setContentType(element.getChildText("contentType"));
        String actionString = element.getAttributeValue("action");
        if (StringUtils.isEmpty(actionString)) {
            throw new ThemeParsingException("Template must contain an 'action' element");
        } else {
            try {
                template.setAction(ComponentType.valueOf(actionString.toUpperCase()));
            } catch (IllegalArgumentException e) {
                throw new ThemeParsingException("Unknown template action value '" + actionString + "'");
            }
        }

		//parsing template code segment
		List<Element> templateCodeList = element.getChildren("templateCode");

		for (Element templateCodeElement : templateCodeList) {
			ThemeMetadataTemplateRendition templateCode = new ThemeMetadataTemplateRendition();
            String templateString = templateCodeElement.getChildText("templateLanguage");
            if (StringUtils.isEmpty(templateString)) {
                throw new ThemeParsingException("templateCode must contain a 'templateLanguage' element");
            } else {
                try {
                    templateCode.setTemplateLang(TemplateLanguage.valueOf(templateString.toUpperCase()));
                } catch (IllegalArgumentException e) {
                    throw new ThemeParsingException("Unknown templateLanguage value '" + templateString + "'");
                }
            }
			templateCode.setContentsFile(templateCodeElement.getChildText("contentsFile"));
            if (StringUtils.isEmpty(templateCode.getContentsFile())) {
                throw new ThemeParsingException("templateCode must contain a 'contentsFile' element");
            }
            String renditionValue = templateCodeElement.getChildText("type");
            if (renditionValue != null) {
                try {
                    templateCode.setType(RenditionType.valueOf(renditionValue.toUpperCase()));
                } catch (IllegalArgumentException e) {
                    throw new ThemeParsingException("Invalid rendition type " + renditionValue + " found.");
                }
            } else {
                throw new ThemeParsingException("templateCode must contain a 'type' element");
            }
			template.addTemplateRendition(templateCode);
		}

		String navbar = element.getChildText("navbar");
		if ("true".equalsIgnoreCase(navbar)) {
			template.setNavbar(true);
		}

		String hidden = element.getChildText("hidden");
		if ("true".equalsIgnoreCase(hidden)) {
			template.setHidden(true);
		}

		// validate template
		if (StringUtils.isEmpty(template.getName())) {
			throw new ThemeParsingException("templates must contain a 'name' element");
		}

		return template;
	}

