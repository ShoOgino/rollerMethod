    /**
     * Truncates a string nicely. It will search for the first space 
     * after the lower limit and truncate the string there.  It will 
     * also append any string passed as a parameter to the end of the 
     * string.  The hard limit can be specified to forcibily truncate a 
     * string (in the case of an extremely long word or such).  All 
     * HTML/XML markup will be stripped from the string prior to 
     * processing for truncation.
     *
     * @param str         String the string to be truncated.
     * @param lower       int value of the lower limit.
     * @param upper       int value of the upper limit, -1 if no limit is 
     *                    desired. If the uppper limit is lower than the 
     *                    lower limit, it will be adjusted to be same as 
     *                    the lower limit.
     * @param appendToEnd String to be appended to the end of the 
     *                    truncated string. 
     *                    This is appended ONLY if the string was indeed 
     *                    truncated. The append is does not count towards 
     *                    any lower/upper limits.
     *
     * @author timster@mac.com
     */
	public static String truncateNicely(String str, int lower, int upper, String appendToEnd)
	{
		// strip markup from the string
		str = XmlW.removeXml(str);
		
		// quickly adjust the upper if it is set lower than 'lower'
		if(upper < lower) {
			upper = lower;
		}		
		
		// now determine if the string fits within the upper limit
		// if it does, go straight to return, do not pass 'go' and collect $200
		if(str.length() > upper) {
			// the magic location int
			int loc;
		
			// first we determine where the next space appears after lower
			loc = str.lastIndexOf(' ', upper);
			
			// now we'll see if the location is greater than the lower limit
			if(loc >= lower) {
				// yes it was, so we'll cut it off here
				str = str.substring(0, loc);
			} else {
				// no it wasnt, so we'll cut it off at the upper limit
				str = str.substring(0, upper);
			}
	
			// the string was truncated, so we append the appendToEnd String				
			str = str + appendToEnd;
		}
		
		return str;
	}

