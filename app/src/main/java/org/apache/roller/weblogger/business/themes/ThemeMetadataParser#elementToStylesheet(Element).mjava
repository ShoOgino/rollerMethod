    private ThemeMetadataTemplate elementToStylesheet(Element element) 
            throws ThemeParsingException {
        
        ThemeMetadataTemplate template = new ThemeMetadataTemplate();
        
        template.setName(element.getChildText("name"));
        template.setDescription(element.getChildText("description"));
        template.setLink(element.getChildText("link"));
        template.setContentType(element.getChildText("contentType"));

        // parsing templatecode segment
        List<Element> templateCodeList = element.getChildren("templateCode");
        for (Element templateCodeElement : templateCodeList) {
            ThemeMetadataTemplateRendition templateCode = new ThemeMetadataTemplateRendition();
            String templateString = templateCodeElement.getChildText("templateLanguage");
            if (StringUtils.isEmpty(templateString)) {
                throw new ThemeParsingException("templateCode must contain a 'templateLanguage' element");
            } else {
                try {
                    templateCode.setTemplateLang(TemplateLanguage.valueOf(templateString.toUpperCase()));
                } catch (IllegalArgumentException e) {
                    throw new ThemeParsingException("Unknown templateLanguage value '" + templateString + "'");
                }
            }
            templateCode.setContentsFile(templateCodeElement.getChildText("contentsFile"));
            if (StringUtils.isEmpty(templateCode.getContentsFile())) {
                throw new ThemeParsingException("stylesheet must contain a 'contentsFile' element");
            }
            String renditionValue = templateCodeElement.getChildText("type");
            if (renditionValue != null) {
                try {
                    templateCode.setType(RenditionType.valueOf(renditionValue.toUpperCase()));
                } catch (IllegalArgumentException e) {
                    throw new ThemeParsingException("Invalid rendition type " + renditionValue + " found.");
                }
            } else {
                throw new ThemeParsingException("templateCode must contain a 'type' element");
            }
            template.addTemplateRendition(templateCode);
        }

        // validate template
        if(StringUtils.isEmpty(template.getName())) {
            throw new ThemeParsingException("stylesheet must contain a 'name' element");
        }
        if(StringUtils.isEmpty(template.getLink())) {
            throw new ThemeParsingException("stylesheet must contain a 'link' element");
        }

        return template;
    }

