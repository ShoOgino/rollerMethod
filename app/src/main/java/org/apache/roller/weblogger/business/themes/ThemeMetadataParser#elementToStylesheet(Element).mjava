    private ThemeMetadataTemplate elementToStylesheet(Element element) 
            throws ThemeParsingException {
        
        ThemeMetadataTemplate template = new ThemeMetadataTemplate();
        
        template.setName(element.getChildText("name"));
        template.setDescription(element.getChildText("description"));
        template.setLink(element.getChildText("link"));
        template.setContentType(element.getChildText("contentType"));
        template.setAction(ComponentType.STYLESHEET);

        // parsing rendition segment
        List<Element> renditionList = element.getChildren("rendition");
        for (Element renditionElement : renditionList) {
            ThemeMetadataTemplateRendition rendition = new ThemeMetadataTemplateRendition();
            String renditionValue = renditionElement.getAttributeValue("type");
            if (renditionValue != null) {
                try {
                    rendition.setType(RenditionType.valueOf(renditionValue.toUpperCase()));
                } catch (IllegalArgumentException e) {
                    throw new ThemeParsingException("Invalid rendition type " + renditionValue + " found.");
                }
            } else {
                // default to standard if type not provided, as most templates are single-rendition
                rendition.setType(RenditionType.STANDARD);
            }
            String templateString = renditionElement.getChildText("templateLanguage");
            if (StringUtils.isEmpty(templateString)) {
                throw new ThemeParsingException("rendition must contain a 'templateLanguage' element");
            } else {
                try {
                    rendition.setTemplateLang(TemplateLanguage.valueOf(templateString.toUpperCase()));
                } catch (IllegalArgumentException e) {
                    throw new ThemeParsingException("Unknown templateLanguage value '" + templateString + "'");
                }
            }
            rendition.setContentsFile(renditionElement.getChildText("contentsFile"));
            if (StringUtils.isEmpty(rendition.getContentsFile())) {
                throw new ThemeParsingException("stylesheet must contain a 'contentsFile' element");
            }
            template.addTemplateRendition(rendition);
        }

        // validate template
        if(StringUtils.isEmpty(template.getName())) {
            throw new ThemeParsingException("stylesheet must contain a 'name' element");
        }
        if(StringUtils.isEmpty(template.getLink())) {
            throw new ThemeParsingException("stylesheet must contain a 'link' element");
        }

        return template;
    }

