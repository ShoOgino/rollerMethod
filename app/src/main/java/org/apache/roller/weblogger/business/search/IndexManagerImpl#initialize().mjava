    /**
     * @inheritDoc
     */
    @Override
    public void initialize() throws InitializationException {

        // only initialize the index if search is enabled
        if (this.searchEnabled) {

            // 1. If inconsistency marker exists.
            // Delete index
            // 2. if we're using RAM index
            // load ram index wrapper around index
            //
            if (indexConsistencyMarker.exists()) {
                getFSDirectory(true);
                inconsistentAtStartup = true;
                mLogger.debug("Index inconsistent: marker exists");
            } else {
                try {
                    File makeIndexDir = new File(indexDir);
                    if (!makeIndexDir.exists()) {
                        makeIndexDir.mkdirs();
                        inconsistentAtStartup = true;
                        mLogger.debug("Index inconsistent: new");
                    }
                    indexConsistencyMarker.createNewFile();
                } catch (IOException e) {
                    mLogger.error(e);
                }
            }

            if (indexExists()) {

                // test if the index is readable, if the version is outdated this might fail and we rebuild.
                // TODO: we probably should just eagerly initialize the actual reader here, since we have it already
                try {
                    DirectoryReader readerProbe = DirectoryReader.open(getFSDirectory(false));
                    readerProbe.close();
                } catch (IOException ex) {
                    mLogger.warn("Error opening search index, scheduling rebuild.", ex);
                    getFSDirectory(true);
                    inconsistentAtStartup = true;
                }
            } else {
                mLogger.debug("Creating index");
                inconsistentAtStartup = true;

                createIndex(getFSDirectory(true));
            }

            if (isInconsistentAtStartup()) {
                mLogger.info("Index was inconsistent. Rebuilding index in the background...");
                try {
                    rebuildWebsiteIndex();
                } catch (WebloggerException e) {
                    mLogger.error("ERROR: scheduling re-index operation");
                }
            } else {
                mLogger.info("Index initialized and ready for use.");
            }
        }

    }

