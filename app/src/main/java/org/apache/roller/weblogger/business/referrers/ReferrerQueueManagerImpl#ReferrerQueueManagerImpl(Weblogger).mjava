    // private because we are a singleton
    @com.google.inject.Inject
    protected ReferrerQueueManagerImpl(Weblogger roller) {
        mLogger.info("Instantiating Referrer Queue Manager");
        this.roller = roller;
        int sleepTime = 10000;
        int numWorkers = 1;

        // lookup config options
        this.asyncMode = WebloggerConfig.getBooleanProperty("referrers.asyncProcessing.enabled");
        mLogger.info("Asynchronous referrer processing = "+this.asyncMode);

        if(this.asyncMode) {
            String num = WebloggerConfig.getProperty("referrers.queue.numWorkers");
            String sleep = WebloggerConfig.getProperty("referrers.queue.sleepTime");
            
            try {
                numWorkers = Integer.parseInt(num);
                
                if (numWorkers < 1) {
                    numWorkers = 1;
                }
                
            } catch(NumberFormatException nfe) {
                mLogger.warn("Invalid num workers ["+num+"], using default");
            }
            
            try {
                // multiply by 1000 because we expect input in seconds
                sleepTime = Integer.parseInt(sleep) * RollerConstants.SEC_IN_MS;
            } catch(NumberFormatException nfe) {
                mLogger.warn("Invalid sleep time ["+sleep+"], using default");
            }
            
            // create the processing queue
            this.referrerQueue = Collections.synchronizedList(new ArrayList<IncomingReferrer>());
            
            // start up workers
            this.workers = new ArrayList<WorkerThread>();
            ContinuousWorkerThread worker;
            QueuedReferrerProcessingJob job;
            for(int i = 0; i < numWorkers; i++) {
                job = new QueuedReferrerProcessingJob();
                worker = new ContinuousWorkerThread("ReferrerWorker" + i, job, sleepTime);
                workers.add(worker);
                worker.start();
            }
        }
    }

