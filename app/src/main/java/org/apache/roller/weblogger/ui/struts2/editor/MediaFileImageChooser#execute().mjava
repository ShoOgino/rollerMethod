    /**
     * Fetches and displays list of media file for the given directory. The
     * directory could be chosen by ID or path.
     * 
     * @return String The result of the action.
     */
    @SkipValidation
    public String execute() {
        MediaFileManager manager = WebloggerFactory.getWeblogger().getMediaFileManager();
        try {

            MediaFileDirectory directory;
            if (this.directoryId != null) {
                directory = manager.getMediaFileDirectory(this.directoryId);
            } else if (this.directoryName != null) {
                directory = manager.getMediaFileDirectoryByName(getActionWeblog(), this.directoryName);
                this.directoryId = directory.getId();
            } else {
                directory = manager.getDefaultMediaFileDirectory(getActionWeblog());
                this.directoryId = directory.getId();
            }

            this.childFiles = new ArrayList<>();
            this.childFiles.addAll(directory.getMediaFiles());
            this.childFiles.sort(new MediaFileComparator( MediaFileComparatorType.NAME));
            this.currentDirectory = directory;

            // List of available directories
            List<MediaFileDirectory> sortedDirList = new ArrayList<>();
            List<MediaFileDirectory> directories = manager.getMediaFileDirectories(getActionWeblog());
            for (MediaFileDirectory mediaFileDirectory : directories) {
                if (!"default".equals(mediaFileDirectory.getName()) || !"default".equals(directory.getName())) {
                    sortedDirList.add(mediaFileDirectory);
                }
            }

            sortedDirList.sort(new MediaFileDirectoryComparator(
                DirectoryComparatorType.NAME));
            setAllDirectories(sortedDirList);

            return SUCCESS;

        } catch (Exception ex) {
            log.error("Error viewing media file directory ", ex);
            addError("MediaFile.error.view");

        }
        return SUCCESS;
    }

