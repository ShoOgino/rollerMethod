    /**
     * Save weblog entry.
     * 
     * @return String The result of the action.
     */
    public String save() {

        // make sure we have an entry to edit and it belongs to the action
        // weblog
        if (getEntry() == null) {
            return ERROR;
        } else if (!getEntry().getWebsite().equals(getActionWeblog())) {
            return DENIED;
        }

        if (!hasActionErrors())
            try {
                WeblogEntryManager weblogMgr = WebloggerFactory.getWeblogger()
                        .getWeblogEntryManager();

                WeblogEntry entry = getEntry();

                // set updatetime & pubtime
                entry.setUpdateTime(new Timestamp(new Date().getTime()));
                entry.setPubTime(getBean().getPubTime(getLocale(),
                        getActionWeblog().getTimeZoneInstance()));

                // copy data to pojo
                getBean().copyTo(entry);

                // handle pubtime auto set
                if (entry.isPublished()) {
                    if (entry.getPubTime() == null) {
                        // no time specified, use current time
                        entry.setPubTime(entry.getUpdateTime());
                    }

                    // if user does not have author perms then force PENDING
                    // status
                    if (!getActionWeblog().hasUserPermission(
                            getAuthenticatedUser(), WeblogPermission.POST)) {
                        entry.setStatus(WeblogEntry.PENDING);
                    }

                    // If the entry was published to future, set status as
                    // SCHEDULED we only consider an entry future published if
                    // it is scheduled more than 1 minute into the future
                    if (entry.getPubTime().after(
                            new Date(System.currentTimeMillis() + 60000))) {
                        getBean().setStatus(WeblogEntry.SCHEDULED);
                    }

                }

                // if user is an admin then apply pinned to main value as well
                GlobalPermission adminPerm = new GlobalPermission(
                        Collections.singletonList(GlobalPermission.ADMIN));
                if (WebloggerFactory.getWeblogger().getUserManager()
                        .checkPermission(adminPerm, getAuthenticatedUser())) {
                    entry.setPinnedToMain(getBean().getPinnedToMain());
                }

                if (!StringUtils.isEmpty(getBean().getEnclosureURL())) {
                    try {
                        // Fetch MediaCast resource
                        log.debug("Checking MediaCast attributes");
                        MediacastResource mediacast = MediacastUtil
                                .lookupResource(getBean().getEnclosureURL());

                        // set mediacast attributes
                        entry.putEntryAttribute("att_mediacast_url",
                                mediacast.getUrl());
                        entry.putEntryAttribute("att_mediacast_type",
                                mediacast.getContentType());
                        entry.putEntryAttribute("att_mediacast_length", ""
                                + mediacast.getLength());

                    } catch (MediacastException ex) {
                        addMessage(getText(ex.getErrorKey()));
                    }
                } else {
                    try {
                        // if MediaCast string is empty, clean out MediaCast
                        // attributes
                        weblogMgr.removeWeblogEntryAttribute(
                                "att_mediacast_url", entry);
                        weblogMgr.removeWeblogEntryAttribute(
                                "att_mediacast_type", entry);
                        weblogMgr.removeWeblogEntryAttribute(
                                "att_mediacast_length", entry);

                    } catch (WebloggerException e) {
                        addMessage(getText("weblogEdit.mediaCastErrorRemoving"));
                    }
                }

                if (log.isDebugEnabled()) {
                    log.debug("entry bean is ...\n" + getBean().toString());
                    log.debug("final status = " + entry.getStatus());
                    log.debug("updtime = " + entry.getUpdateTime());
                    log.debug("pubtime = " + entry.getPubTime());
                }

                log.debug("Saving entry");
                weblogMgr.saveWeblogEntry(entry);
                WebloggerFactory.getWeblogger().flush();

                // notify search of the new entry
                if (entry.isPublished()) {
                    reindexEntry(entry);
                } else {
                    removeEntryIndex(entry);
                }

                // notify caches
                CacheManager.invalidate(entry);

                // Queue applicable pings for this update.
                if (entry.isPublished()) {
                    WebloggerFactory.getWeblogger().getAutopingManager()
                            .queueApplicableAutoPings(entry);
                }

                if (entry.isPending()) {
                    // implies that entry just changed to pending
                    MailUtil.sendPendingEntryNotice(entry);
                    addMessage("weblogEdit.submittedForReview");
                } else {
                    addMessage("weblogEdit.changesSaved");
                }

                return INPUT;

            } catch (Exception e) {
                log.error("Error saving new entry", e);
                // TODO: i18n
                addError("Error saving new entry");
            }

        return INPUT;
    }

