	/**
	 * Get an Reader so that the Runtime can build a template with it.
	 * 
	 * @param name
	 *            name of template to get
	 * @return Reader containing the template
	 * @throws ResourceNotFoundException if template not found in classpath.
	 *
	 */
    @Override
	public Reader getResourceReader(String name, String encoding) {

		InputStream result = null;
		Exception exception = null;

		if (name == null || name.length() == 0) {
			throw new ResourceNotFoundException(
					"WebappResourceLoader: No template name provided");
		}

		// names are <template>|<deviceType>
		// loading weblog.vm etc will not have the type so only check for
		// one.
		String[] split = name.split("\\|", 2);
		if (split.length < 1) {
			throw new ResourceNotFoundException("Invalid ThemeRL key " + name);
		}

		String savedPath = templatePaths.get(name);
		if (savedPath != null) {
			result = servletContext.getResourceAsStream(savedPath + split[0]);
		}

		if (result == null) {
            for (String pathSegment : paths) {
				String path = pathSegment + split[0];
				try {
					result = servletContext.getResourceAsStream(path);

					// save the path and exit the loop if we found the template
					if (result != null) {
						templatePaths.put(name, pathSegment);
						break;
					}
				} catch (NullPointerException npe) {
					// no servletContext was set, whine about it!
					throw npe;
				} catch (Exception e) {
					// only save the first one for later throwing
					if (exception == null) {
						if (log.isDebugEnabled()) {
							log.debug("WebappResourceLoader: Could not load "
									+ path, e);
						}
						exception = e;
					}
				}
			}
		}

		// If we never found the template
		if (result == null) {
			String msg = "WebappResourceLoader: Resource '" + name
					+ "' not found.";

			// convert to a general Velocity ResourceNotFoundException
			if (exception == null) {
				throw new ResourceNotFoundException(msg);
			} else {
				msg += "  Due to: " + exception;
				throw new ResourceNotFoundException(msg, exception);
			}
		}

		return new InputStreamReader(result);
	}

