    /**
     * Fetches and displays list of media file for the given directory.
     * The directory could be chosen by ID or path.
     *
     * @return String The result of the action.
     */
    @SkipValidation
    public String execute() {
        MediaFileManager manager = WebloggerFactory.getWeblogger().getMediaFileManager();
        try {
            MediaFileDirectory directory;
            if (this.directoryId != null) {
                directory = manager.getMediaFileDirectory(this.directoryId);
            } else if (this.directoryPath != null) {
                directory = manager.getMediaFileDirectoryByPath(getActionWeblog(), this.directoryPath);
                this.directoryId = directory.getId();
            } else {
                directory = manager.getMediaFileRootDirectory(getActionWeblog());
                this.directoryId = directory.getId();
            }

            this.childDirectories = new ArrayList<MediaFileDirectory>();
            this.childDirectories.addAll(directory.getChildDirectories());

            this.childFiles = new ArrayList<MediaFile>();

            // only add image files
            for (MediaFile mf : directory.getMediaFiles()) {
                if (mf.isImageFile()) {
                    this.childFiles.add(mf);
                }
            }

            Collections.sort(this.childDirectories,
                    new MediaFileDirectoryComparator(DirectoryComparatorType.NAME));
            Collections.sort(this.childFiles,
                    new MediaFileComparator(MediaFileComparatorType.NAME));

            this.currentDirectory = directory;

            return SUCCESS;

        } catch (FileIOException ex) {
            log.error("Error viewing media file directory ", ex);
            addError("MediaFile.error.view");
            
        } catch (Throwable e) {
            log.error("Error viewing media file directory ", e);
            addError("MediaFile.error.view");
        }
        return SUCCESS;
    }

