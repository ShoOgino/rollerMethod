	/* (non-Javadoc)
	 * @see org.springframework.security.providers.AuthenticationProvider#authenticate(org.springframework.security.Authentication)
	 */
	public Authentication authenticate(Authentication authentication) throws AuthenticationException {
		Assert.isInstanceOf(UsernamePasswordAuthenticationToken.class, authentication, 
				messages.getMessage("AbstractUserDetailsAuthenticationProvider.onlySupports",
						"Only UsernamePasswordAuthenticationToken is supported"));

		UsernamePasswordAuthenticationToken authenticationToken = null;
		if(crowdClient != null){
			UsernamePasswordAuthenticationToken userToken = (UsernamePasswordAuthenticationToken)authentication;
			String password = (String) authentication.getCredentials();
			String username = userToken.getName();

			Assert.notNull(password, "Null password was supplied in authentication token");

			if(!StringUtils.hasLength(username)) {
				throw new BadCredentialsException(messages.getMessage("CrowdAuthenticationProvider.emptyUsername", "Empty Username"));
			}

			if(password.length() == 0) {
				LOG.debug("Rejecting empty password for user " + username);
				throw new BadCredentialsException(messages.getMessage("CrowdAuthenticationProvider.emptyPassword", "Empty Password"));
			}			

			try {

				User user = crowdClient.authenticateUser(authentication.getName(), authentication.getCredentials().toString());

				GrantedAuthority[] grantedAuthorities = getGrantedAuthorities(user);
				// this is the required constructor, since we don't know any of the boolean values
				// and we can assume if the employee is active and we have gotten this far, these values
				// can be set to the isActive() field on the crowd User object.
				// NOTE: null values for timeZone and locale are okay, they are dealt with at another level.
				CrowdRollerUserDetails crowdRollerUserDetails = 
						new CrowdRollerUserDetails(user, authentication.getCredentials().toString(), crowdTimezone, crowdLocale, grantedAuthorities);

				authenticationToken = new UsernamePasswordAuthenticationToken(crowdRollerUserDetails, authentication.getCredentials(), grantedAuthorities);

			} catch (UserNotFoundException e) {
				throw new UsernameNotFoundException(e.getMessage(), e);
			} catch (InactiveAccountException e) {
				throw new DisabledException(e.getMessage(), e);
			} catch (ExpiredCredentialException e) {
				throw new CredentialsExpiredException(e.getMessage(), e);
			} catch (InvalidAuthenticationException e) {
				throw new BadCredentialsException(e.getMessage(), e);
			} catch (ApplicationPermissionException e) {
				throw new AuthenticationServiceException(e.getMessage(), e);
			} catch (OperationFailedException e) {
				throw new AuthenticationServiceException(e.getMessage(), e);
			}
		}
		return authenticationToken;
	}

