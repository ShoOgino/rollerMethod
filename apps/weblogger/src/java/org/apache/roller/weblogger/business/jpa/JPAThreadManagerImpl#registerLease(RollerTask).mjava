    /**
     * Try to aquire a lock for a given RollerTask.
     */
    @Override
    public boolean registerLease(RollerTask task) {
        
        log.debug("Attempting to register lease for task - "+task.getName());
        
        // keep a copy of the current time
        Date currentTime = new Date();
        
        // query for existing lease record first
        TaskLock taskLock = null;
        try {
            taskLock = this.getTaskLockByName(task.getName());

            if(taskLock == null) {
                log.debug("Task record does not exist, inserting empty record to start with");
                
                // insert an empty record, then we will actually acquire the
                // lease below using an update statement
                taskLock = new TaskLock();
                taskLock.setName(task.getName());
                taskLock.setTimeAquired(new Date(0));
                taskLock.setTimeLeased(0);

                // save it and flush
                this.saveTaskLock(taskLock);
                roller.flush();
            }

        } catch (WebloggerException ex) {
            log.warn("Error getting or inserting TaskLock", ex);
            return false;
        }

        // try to acquire lease
        try {
            // calculate lease expiration time
            Date leaseExpiration = taskLock.getLeaseExpiration();
            
            // calculate run time for task, this is expected time, not actual time
            // i.e. if a task is meant to run daily at midnight this should
            // reflect 00:00:00 on the current day
            Date runTime = currentTime;
            if("startOfDay".equals(task.getStartTimeDesc())) {
                // start of today
                runTime = DateUtil.getStartOfDay(currentTime);
            } else if("startOfHour".equals(task.getStartTimeDesc())) {
                // start of this hour
                runTime = DateUtil.getStartOfHour(currentTime);
            } else {
                // start of this minute
                runTime = DateUtil.getStartOfMinute(currentTime);
            }
            
            if(log.isDebugEnabled()) {
                log.debug("last run = "+taskLock.getLastRun());
                log.debug("new run time = "+runTime);
                log.debug("last acquired = "+taskLock.getTimeAquired());
                log.debug("time leased = "+taskLock.getTimeLeased());
                log.debug("lease expiration = "+leaseExpiration);
            }

            Query q = strategy.getNamedUpdate(
                    "TaskLock.updateClient&Timeacquired&Timeleased&LastRunByName&Timeacquired");
            q.setParameter(1, task.getClientId());
            q.setParameter(2, Integer.valueOf(task.getLeaseTime()));
            q.setParameter(3, new Timestamp(runTime.getTime()));
            q.setParameter(4, task.getName());
            q.setParameter(5, taskLock.getTimeAquired());
            q.setParameter(6, new Timestamp(leaseExpiration.getTime()));
            int result = q.executeUpdate();
            
            if(result == 1) {
                return true;
            }

        } catch (Exception e) {
            log.warn("Error obtaining lease, assuming race condition.", e);
            return false;
        }

        return false;
    }

