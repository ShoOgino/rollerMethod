    /**
     * Try to aquire a lease for a given RollerTask.
     */
    @Override
    public boolean registerLease(RollerTask task) {
        
        log.debug("Attempting to register lease for task - "+task.getName());
        
        // keep a copy of the current time
        Date currentTime = new Date();
        
        // query for existing lease record first
        TaskLock taskLock = null;
        try {
            taskLock = getTaskLockByName(task.getName());
            if(taskLock == null) {
                log.warn("Cannot acquire lease when no tasklock record exists for task - "+task.getName());
            }
        } catch (WebloggerException ex) {
            log.warn("Error getting TaskLock", ex);
            return false;
        }
        
        // try to acquire lease
        if(taskLock != null) try {
            // calculate lease expiration time
            Date leaseExpiration = taskLock.getLeaseExpiration();
            
            // calculate run time for task, this is expected time, not actual time
            // i.e. if a task is meant to run daily at midnight this should
            // reflect 00:00:00 on the current day
            Date runTime = currentTime;
            if("startOfDay".equals(task.getStartTimeDesc())) {
                // start of today
                runTime = DateUtil.getStartOfDay(currentTime);
            } else if("startOfHour".equals(task.getStartTimeDesc())) {
                // start of this hour
                runTime = DateUtil.getStartOfHour(currentTime);
            } else {
                // start of this minute
                runTime = DateUtil.getStartOfMinute(currentTime);
            }
            
            if(log.isDebugEnabled()) {
                log.debug("last run = "+taskLock.getLastRun());
                log.debug("new run time = "+runTime);
                log.debug("last acquired = "+taskLock.getTimeAquired());
                log.debug("time leased = "+taskLock.getTimeLeased());
                log.debug("lease expiration = "+leaseExpiration);
            }
            
            Session session = strategy.getSession();
            String queryHQL = "update TaskLock "+
                    "set client=:client, timeacquired=current_timestamp(), timeleased=:timeleased, lastrun=:runTime "+
                    "where name=:name and timeacquired=:timeacquired and current_timestamp() > :leaseends";
            Query query = session.createQuery(queryHQL);
            query.setString("client", task.getClientId());
            query.setInteger("timeleased", task.getLeaseTime());
            query.setTimestamp("runTime", runTime);
            query.setString("name", task.getName());
            query.setTimestamp("timeacquired", taskLock.getTimeAquired());
            query.setTimestamp("leaseends", leaseExpiration);
            int result = query.executeUpdate();
            
            roller.flush();
            
            if(result == 1) {
                return true;
            }
            
        } catch (Exception e) {
            log.warn("Error obtaining lease, assuming race condition.", e);
            return false;
        }
        
        return false;
    }

