    /**
     * Handles requests for user uploaded resources.
     */
    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        MediaFileManager mfMgr = WebloggerFactory.getWeblogger().getMediaFileManager();

        String fileId = request.getPathInfo();
        
        log.debug("parsing file id -  " + fileId);
        
        // first, cleanup extra slashes and extract the weblog weblogHandle
        if(fileId != null && fileId.trim().length() > 1) {
            
            // strip off the leading slash
        	fileId = fileId.substring(1);
            
            // strip off trailing slash if needed
            if(fileId.endsWith("/")) {
            	fileId = fileId.substring(0, fileId.length() - 1);
            }
        }

        log.debug("File requested [" + fileId + "]");
    
        long resourceLastMod = 0;
        InputStream resourceStream = null;
        MediaFile mediaFile = null;
        
        try {
            mediaFile = mfMgr.getMediaFile(fileId, true);
            resourceLastMod = mediaFile.getLastModified();
        } catch (Exception ex) {
            // still not found? then we don't have it, 404.
            log.debug("Unable to get resource", ex);
            response.sendError(HttpServletResponse.SC_NOT_FOUND);
            return;
        }

        // Respond with 304 Not Modified if it is not modified.
        if (ModDateHeaderUtil.respondIfNotModified(request, response, resourceLastMod)) {
            return;
        } else {
            // set last-modified date
            ModDateHeaderUtil.setLastModifiedHeader(response, resourceLastMod);
        }
        

        // set the content type based on whatever is in our web.xml mime defs
        response.setContentType(mediaFile.getContentType());
        resourceStream = mediaFile.getInputStream();
        
        OutputStream out = null;
        try {
            // ok, lets serve up the file
            byte[] buf = new byte[8192];
            int length = 0;
            out = response.getOutputStream();
            while((length = resourceStream.read(buf)) > 0) {
                out.write(buf, 0, length);
            }
            
            // close output stream
            out.close();
            
        } catch (Exception ex) {
            if(!response.isCommitted()) {
                response.reset();
                response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            }
        } finally {
            // make sure stream to resource file is closed
            resourceStream.close();
        }

    }

