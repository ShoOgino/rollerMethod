    // Lookup Entries from a specific list of groups
    public List getEntries(List groups, Date startDate, 
                           Date endDate, int offset, int length)
            throws RollerException {
        
        if (groups == null) {
            throw new RollerException("groups cannot be null");
        }
        
        if (groups.size() == 0) {
            throw new RollerException("groups cannot be empty");
        }
        
        List ret = null;
        try {
            long startTime = System.currentTimeMillis();
            
            Session session = ((HibernatePersistenceStrategy)strategy).getSession();
            
            StringBuffer sb = new StringBuffer();
            sb.append("select e from PlanetEntryData e ");
            sb.append("join e.subscription.groups g ");
            
            sb.append("where (");
            for (int i=0; i<groups.size(); i++) {
                if (i > 0) sb.append(" and ");
                sb.append(" g=:group" + i);
            }
            sb.append(")");
            
            if (startDate != null) {
                sb.append("and e.pubTime > :startDate ");
            }
            if (endDate != null) {
                sb.append("and e.pubTime < :endDate ");
            }
            sb.append("order by e.pubTime desc");
            
            Query query = session.createQuery(sb.toString());
            for (int i=0; i<groups.size(); i++) {
                PlanetGroupData group = (PlanetGroupData)groups.get(i);
                query.setParameter("group" + i, group);
            }
            if(offset > 0) {
                query.setFirstResult(offset);
            }
            if (length != -1) {
                query.setMaxResults(length);
            }
            if (startDate != null) {
                query.setParameter("startDate", startDate);
            }
            if(endDate != null) {
                query.setParameter("endDate", endDate);
            }
            
            ret = query.list();
            
            long endTime = System.currentTimeMillis();
            
            log.debug("Generated aggregation in "
                    +((endTime-startTime)/1000.0)+" seconds");
            
        } catch (Throwable e) {
            throw new RollerException(e);
        }
        
        return ret;
    }

