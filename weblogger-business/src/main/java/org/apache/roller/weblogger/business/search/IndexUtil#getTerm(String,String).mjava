	/**
	 * Create a lucene term from the first token of the input string.
	 * 
	 * @param field
	 *            The lucene document field to create a term with
	 * @param input
	 *            The input you wish to convert into a term
	 * 
	 * @return Lucene search term
	 */
	public static final Term getTerm(String field, String input) {

		if (input == null || field == null)
			return null;

		Analyzer analyer = IndexManagerImpl.getAnalyzer();
		TokenStream tokens = analyer
				.tokenStream(field, new StringReader(input));

		Term term = null;

		// LengthFilter(EnablePositionIncrements ..) If true, this TokenFilter
		// will preserve positions of the incoming tokens (ie, accumulate and
		// set position increments of the removed tokens). Generally, true is
		// best as it does not lose information (positions of the original
		// tokens) during indexing. When set, when a token is stopped (omitted),
		// the position increment of the following token is incremented.

		// Min length 1 characters
		tokens = new LengthFilter(true, tokens, 1, Integer.MAX_VALUE);

		CharTermAttribute termAtt = (CharTermAttribute) tokens
				.addAttribute(CharTermAttribute.class);

		try {

			tokens.reset();

			if (tokens.incrementToken()) {
				// System.out.println("token: " + tokens);
				String termt = termAtt.toString();
				term = new Term(field, termt);
			}

		} catch (IOException e) {
			// ignored
		}

		return term;
	}

