	public void lifecycleEvent(LifecycleEvent event) {	
		
		if (event.getType().equals(Lifecycle.START_EVENT)) {
            Thread server = new Thread() {
                public void run() {
                    try {
                        System.out.println("Starting Derby");
                        NetworkServerControl server = new NetworkServerControl();
                        server.start(new PrintWriter(System.out));
                    } catch (Exception e) {
                        System.out.println("ERROR staring up Derby");
                        e.printStackTrace();
                    }
                }
            };
            server.start();
		}
		else if (event.getType().equals(Lifecycle.STOP_EVENT)) {
            try {
                System.out.println("Stopping Derby");
                NetworkServerControl server = new NetworkServerControl();
                server.shutdown();
                try {Thread.sleep(2000);} catch (Exception ignored) {}
            } catch (Exception e) {
                System.out.println("ERROR shutting down Derby");
                e.printStackTrace();
            }
            
            // This is drastic, but 
            // 1) we really want Tomcat to stop and 
            // 2) this is a DEMO bundle
            System.exit(0);
		}
		else {
			System.out.println(getClass().getName() 
               + ": Not handling LifecycleEvent: " + event.getType());
		}
	}

