    //-----------------------------------------------------------------------------
    /**
     * Handles an Atom GET by calling handler and writing results to response.
     */
    protected void doGet(HttpServletRequest req, HttpServletResponse res)
        throws ServletException, IOException
    {
        AtomHandler handler = createAtomRequestHandler(req);
        String userName = handler.getAuthenticatedUsername();
        if (userName != null) 
        {
            String[] pathInfo = getPathInfo(req);
            try
            {
                if (handler.isIntrospectionURI(pathInfo)) 
                {
                    // return an Atom Service document
                    AtomService service = handler.getIntrospection(pathInfo);                   
                    Document doc = AtomService.serviceToDocument(service);
                    Writer writer = res.getWriter();
                    XMLOutputter outputter = new XMLOutputter();
                    outputter.setFormat(Format.getPrettyFormat());
                    outputter.output(doc, writer);
                    writer.close();
                    res.setStatus(HttpServletResponse.SC_OK);
                }
                else if (handler.isCollectionURI(pathInfo))
                {
                    // return a collection
                    String ranges = req.getHeader("Range");
                    if (ranges == null) req.getParameter("Range");
                    AtomCollection col = null;
                    if (ranges != null) 
                    {
                        /* // return a range of collection members
                        AtomCollection.Range range = 
                            AtomCollection.parseRange(req.getHeader("Range"));
                        int offset = 0;
                        String offsetString = req.getParameter("offset");
                        if (offsetString != null) 
                        {
                            offset = Integer.parseInt(offsetString);
                        }
                        col= handler.getCollection(
                            pathInfo, range.start, range.end, offset); */
                    }
                    else 
                    {
                        col= handler.getCollection(pathInfo);
                    }
                    // serialize collection to XML and write it out
                    Document doc = AtomCollection.collectionToDocument(col);
                    Writer writer = res.getWriter();
                    XMLOutputter outputter = new XMLOutputter();
                    outputter.setFormat(Format.getPrettyFormat());
                    outputter.output(doc, writer);
                    writer.close();
                    res.setStatus(HttpServletResponse.SC_OK);
                }
                else if (handler.isEntryURI(pathInfo)) 
                {
                    // return an entry
                    Entry entry = handler.getEntry(pathInfo);                    
                    Writer writer = res.getWriter(); 
                    serializeEntry(entry, writer);                    
                    writer.close();
                }
                else if (handler.isResourceURI(pathInfo))
                {
                    // return a resource
                    String absPath = handler.getResourceFilePath(pathInfo);
                    String type = getServletContext().getMimeType(absPath);
                    res.setContentType(type);
                    Utilities.copyInputToOutput(
                        new FileInputStream(absPath), res.getOutputStream());
                }
                else
                {
                    res.setStatus(HttpServletResponse.SC_NOT_FOUND);
                }
            }
            catch (Exception e)
            {
                res.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                e.printStackTrace(res.getWriter());
                mLogger.error(e);
            }
        }
        else 
        {
            res.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
        }
    }

