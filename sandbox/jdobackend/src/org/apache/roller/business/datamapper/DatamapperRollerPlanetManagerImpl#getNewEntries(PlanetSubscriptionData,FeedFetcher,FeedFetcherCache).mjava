    protected Set getNewEntries(PlanetSubscriptionData sub,
                                FeedFetcher feedFetcher,
                                FeedFetcherCache feedInfoCache)
            throws RollerException {

        String localURL = RollerRuntimeConfig.getProperty("site.absoluteurl");

        // if this is not a local url then let parent deal with it
        if (StringUtils.isEmpty(localURL) || 
            !sub.getFeedURL().startsWith(localURL)) {

            log.debug("Feed is remote, letting parent handle it " +
                sub.getFeedURL());

            return super.getNewEntries(sub, feedFetcher, feedInfoCache);
        }

        try {
            // for local feeds, sub.author = website.handle
            // feed is from our domain and we have a handle, lets deal with it
            if(sub.getAuthor() != null) {

                log.debug("Getting LOCAL feed "+sub.getFeedURL());

                Set newEntries = new TreeSet();

                // get corresponding website object
                UserManager usermgr = RollerFactory.getRoller()
                    .getUserManager();
                WebsiteData website = usermgr
                    .getWebsiteByHandle(sub.getAuthor());
                if (website == null)
                    return newEntries;

                // figure website last update time
                WeblogManager blogmgr = RollerFactory.getRoller()
                    .getWeblogManager();

                Date siteUpdated = website.getLastModified();
                if (siteUpdated == null) { // Site never updated, skip it
                    log.warn("Last-publish time null, skipping local feed ["
                            + website.getHandle() + "]");
                    return newEntries;
                }

                // if website last update time > subsciption last update time
                List entries = new ArrayList();
                if (sub.getLastUpdated()==null || 
                        siteUpdated.after(sub.getLastUpdated())) {
                    int entryCount = RollerRuntimeConfig.getIntProperty(
                            "site.newsfeeds.defaultEntries");
                    entries = blogmgr.getWeblogEntries(
                            website,
                            null,
                            null,                        // startDate
                            new Date(),                  // endDate
                            null,                        // catName
                            null,                        // tags
                            WeblogEntryData.PUBLISHED,   // status
                            null,                        // sortby (null means pubTime)
                            null,                        // locale
                            0,                           // offset
                            entryCount);

                    sub.setLastUpdated(siteUpdated);
                    saveSubscription(sub);

                } else {
                    if (log.isDebugEnabled()) {
                        String msg = MessageFormat.format(
                                "   Skipping ({0} / {1})", new Object[] {
                            siteUpdated, sub.getLastUpdated()});
                        log.debug(msg);
                    }
                }

                // Populate subscription object with new entries
                PluginManager ppmgr = RollerFactory.getRoller()
                    .getPagePluginManager();
                Map pagePlugins = ppmgr.getWeblogEntryPlugins(website);
                Iterator entryIter = entries.iterator();
                while (entryIter.hasNext()) {
                    try {
                        WeblogEntryData rollerEntry =
                            (WeblogEntryData)entryIter.next();
                        PlanetEntryData entry = null;
//TODO: DatamapperPort Need to sync up code with trunk                        
//                            new PlanetEntryData(rollerEntry, sub,
//                                pagePlugins);
                        saveEntry(entry);
                        newEntries.add(entry);
                    } catch (Exception e) {
                        log.error("ERROR processing subscription entry", e);
                    }
                }

                return newEntries;
            }
        } catch (Exception e) {
            log.warn("Problem reading local feed", e);
        }

        log.debug("Failed to fetch locally, trying remote "+sub.getFeedURL());

        // if there was an error then try normal planet method
        return super.getNewEntries(sub, feedFetcher, feedInfoCache);
    }

