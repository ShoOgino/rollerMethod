    public List getMostCommentedWebsites(Date startDate, Date endDate, 
        int offset, int length)
        throws RollerException {

        DatamapperQuery query = null;
        List queryResults = null;
        boolean setRange = offset != 0 || length != -1;

        if (length == -1) {
            length = Integer.MAX_VALUE - offset;
        }

        if (endDate == null) endDate = new Date();
        
        if (startDate != null) {
            query = strategy.newQuery(CommentData.class, 
                "CommentData.getMostCommentedWebsiteByEndDate&StartDate");
            if (setRange) query.setRange(offset, offset + length);
            queryResults = (List) query.execute(
                new Object[] {endDate, startDate});            
        } else {
            query = strategy.newQuery(CommentData.class, 
                "CommentData.getMostCommentedWebsiteByEndDate");
            if (setRange) query.setRange(offset, offset + length);
            queryResults = (List) query.execute(endDate);
        }

        // TODO: DatamapperPort - The original query list column not present in group by clause in select clause
        // this is not allowed by JPA spec (and many db vendors).
        // Changed the select clause to match group by clause.
        // Currently, the only caller of this method is SiteModel.getMostCommentedWeblogs() (apart from a junit test)
        // check with roller developers what is the expected behavior of this query 

        List results = new ArrayList();
        for (Iterator iter = queryResults.iterator(); iter.hasNext();) {
            Object[] row = (Object[]) iter.next();
            results.add(new StatCount(
                    (String)row[1],                     // website id
                    (String)row[2],                     // website handle
                    (String)row[3],                     // website name
                    "statCount.weblogCommentCountType", // stat type 
                    ((Long)row[0]).longValue())); // # comments
        }
        //TODO Uncomment following once integrated with code
        //Collections.sort(results, StatCount.getComparator());
        Collections.reverse(results);
        return results;
    }

