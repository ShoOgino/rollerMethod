    /**
     * convenience method for removing contents of a weblog.
     * TODO BACKEND: use manager methods instead of queries here
     * TODO DatamapperPort: Use bulk deletes instead of current approach
     */
    private void removeWebsiteContents(WebsiteData website) 
            throws  RollerException {

        BookmarkManager bmgr = RollerFactory.getRoller().getBookmarkManager();
        WeblogManager wmgr = RollerFactory.getRoller().getWeblogManager();

        // remove tags
        DatamapperQuery tagQuery = strategy.newQuery(WeblogEntryTagData.class,
                "WeblogEntryTagData.getByWeblog");
        for(Iterator iter = ( (List)tagQuery.execute(website) ) .iterator(); iter.hasNext();) {
            WeblogEntryTagData tagData = (WeblogEntryTagData) iter.next();
            this.strategy.remove(tagData);
        }

        // remove site tag aggregates
        List tags = wmgr.getTags(website, null, null, -1);
        updateTagAggregates(tags);

        // delete all weblog tag aggregates
        strategy.newRemoveQuery(
                WeblogEntryTagAggregateData.class,
                "WeblogEntryTagAggregateData.deleteByWeblog").removeAll(website);

        // delete all bad counts
        strategy.newRemoveQuery(
                WeblogEntryTagAggregateData.class,
                "WeblogEntryTagAggregateData.deleteByTotalLEZero").removeAll();


        // Remove the website's ping queue entries
        List queueEntries = (List)strategy.newQuery(PingQueueEntryData.class,
                "PingQueueEntryData.getByWebsite").execute(website);
        Iterator it = queueEntries.iterator();
        while(it.hasNext()) {
            this.strategy.remove((PingQueueEntryData) it.next());
        }

        // Remove the website's auto ping configurations
        AutoPingManager autoPingMgr = RollerFactory.getRoller()
            .getAutopingManager();
        List autopings = autoPingMgr.getAutoPingsByWebsite(website);
        it = autopings.iterator();
        while(it.hasNext()) {
            this.strategy.remove((AutoPingData) it.next());
        }

        // Remove the website's custom ping targets
        PingTargetManager pingTargetMgr = RollerFactory.getRoller().getPingTargetManager();
        List pingtargets = pingTargetMgr.getCustomPingTargets(website);
        it = pingtargets.iterator();
        while(it.hasNext()) {
            this.strategy.remove((PingTargetData) it.next());
        }

        // remove entries
        List entries = (List)strategy.newQuery(PingQueueEntryData.class,
                "WeblogEntryData.getByWebsite").execute(website);

        for (Iterator iter = entries.iterator(); iter.hasNext();) {
            WeblogEntryData entry = (WeblogEntryData) iter.next();

            this.strategy.remove(entry);
        }

        // remove associated referers
        List referers = (List)strategy.newQuery(RefererData.class,
                "RefererData.getByWebsite").execute(website);
        for (Iterator iter = referers.iterator(); iter.hasNext();) {
            RefererData referer = (RefererData) iter.next();
            this.strategy.remove(referer);
        }

        // remove associated pages
        List pages = (List)strategy.newQuery(WeblogTemplate.class,
                "WeblogTemplate.getByWebsite").execute(website);

        for (Iterator iter = pages.iterator(); iter.hasNext();) {
            WeblogTemplate page = (WeblogTemplate) iter.next();
            this.strategy.remove(page);
        }

        // remove folders (including bookmarks)
        FolderData rootFolder = bmgr.getRootFolder(website);
        if (null != rootFolder) {
            this.strategy.remove(rootFolder);
        }

        // remove categories
        WeblogCategoryData rootCat = wmgr.getRootWeblogCategory(website);
        if (null != rootCat) {
            this.strategy.remove(rootCat);
        }

        //remove permissions
        //TODO: Datamapper: this is a workaround for toplink bug that requires
        //to clean up from non owning side for removed objects.
        for (Iterator iterator = website.getPermissions().iterator(); iterator.hasNext();) {
            PermissionsData perms = (PermissionsData) iterator.next();
            //Remove it from database
            this.strategy.remove(perms);
            //Remove it from website
            iterator.remove();
            //Remove it from corresponding user
            UserData user = perms.getUser(); //(UserData) getManagedObject(perms.getUser());
            user.getPermissions().remove(perms);
        }

        // flush the changes before returning. This is required as there is a
        // circular dependency between WeblogCategoryData and WebsiteData
        this.strategy.flush();
    }

