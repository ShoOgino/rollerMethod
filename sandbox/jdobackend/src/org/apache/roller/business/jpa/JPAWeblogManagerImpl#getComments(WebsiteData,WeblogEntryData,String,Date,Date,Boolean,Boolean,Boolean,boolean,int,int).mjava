    /**
     * @inheritDoc
     */
    public List getComments(
            WebsiteData     website,
            WeblogEntryData entry,
            String          searchString,
            Date            startDate,
            Date            endDate,
            Boolean         pending,
            Boolean         approved,
            Boolean         spam,
            boolean         reverseChrono,
            int             offset,
            int             length) throws RollerException {
            
        List params = new ArrayList();
        int size = 0;
        StringBuffer queryString = new StringBuffer();
        queryString.append("SELECT c FROM CommentData c WHERE ");

        if (entry != null) {
            params.add(size++, entry);
            queryString.append("c.weblogEntry = ?").append(size);
        } else if (website != null) {
            params.add(size++, website);
            queryString.append("c.weblogEntry.website = ?").append(size);
        }
            
        if (searchString != null) {
            params.add(size++, "%" + searchString + "%");
            queryString.append(" AND (url LIKE ?").append(size).
                        append(" OR content LIKE ?").append(size).append(")");
        }
            
        if (startDate != null) {
            params.add(size++, startDate);
            queryString.append("c.postTime >= ?").append(size);
        }
            
        if (endDate != null) {
            params.add(size++, endDate);
            queryString.append("c.postTime =< ?").append(size);
        }
            
        if (pending != null) {
            params.add(size++, pending);
            queryString.append("c.pending = ?").append(size);
        }
            
        if (approved != null) {
            params.add(size++, approved);
            queryString.append("c.approved = ?").append(size);
        }
            
        if (spam != null) {
            params.add(size++, spam);
            queryString.append("c.spam = ?").append(size);
        }
            
        if (reverseChrono) {
            queryString.append(" ORDER BY c.postTime DESC");
        } else {
            queryString.append(" ORDER BY c.postTime ASC");
        }
            
        JPADynamicQueryImpl query = (JPADynamicQueryImpl) 
            ((JPAPersistenceStrategy) strategy)
            .newDynamicQuery(queryString.toString());
            
        if (length != -1) {
            query.setRange(offset, length);
        }

        List comments = (List) query.execute(params.toArray());
        if (offset==0 || comments.size() < offset) {
            return comments;
        }
        List range = new ArrayList();
        for (int i=offset; i<comments.size(); i++) {
            range.add(comments.get(i));
        }
        return range;
    }

