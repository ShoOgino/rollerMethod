    /**
     * @inheritDoc
     */
    public List getComments(
            WebsiteData     website,
            WeblogEntryData entry,
            String          searchString,
            Date            startDate,
            Date            endDate,
            String          status,
            boolean         reverseChrono,
            int             offset,
            int             length) throws RollerException {
            
        List params = new ArrayList();
        int size = 0;
        StringBuffer queryString = new StringBuffer();
        queryString.append("SELECT c FROM CommentData c ");

        StringBuffer whereClause = new StringBuffer();
        if (entry != null) {
            params.add(size++, entry);
            whereClause.append("c.weblogEntry = ?").append(size);
        } else if (website != null) {
            params.add(size++, website);
            whereClause.append("c.weblogEntry.website = ?").append(size);
        }
            
        if (searchString != null) {
            params.add(size++, "%" + searchString + "%");
            appendConjuctionToWhereclause(whereClause, "(c.url LIKE ?")
                    .append(size).append(" OR c.content LIKE ?").append(size).append(")");
        }
            
        if (startDate != null) {
            params.add(size++, startDate);
            appendConjuctionToWhereclause(whereClause, "c.postTime >= ?");
        }
            
        if (endDate != null) {
            params.add(size++, endDate);
            appendConjuctionToWhereclause(whereClause, "c.postTime <= ?");
        }

        if (status != null) {
            String comparisionOperator;
            if("ALL_IGNORE_SPAM".equals(status)) {
                // we want all comments, expect spam
                // so that means where status != SPAM
                status = CommentData.SPAM;
                comparisionOperator = " <> ";
            } else {
                comparisionOperator = " = ";
            }
            params.add(size++, status);
            appendConjuctionToWhereclause(whereClause, "c.status ")
                    .append(comparisionOperator).append('?').append(size);
        }

        if(whereClause.length() != 0) {
            queryString.append(" WHERE ").append(whereClause);
        }
        if (reverseChrono) {
            queryString.append(" ORDER BY c.postTime DESC");
        } else {
            queryString.append(" ORDER BY c.postTime ASC");
        }
            
        JPADynamicQueryImpl query = (JPADynamicQueryImpl) 
            ((JPAPersistenceStrategy) strategy)
            .newDynamicQuery(queryString.toString());
            
        if (length != -1) {
            query.setRange(offset, length);
        }

        List comments = (List) query.execute(params.toArray());
        if (offset==0 || comments.size() < offset) {
            return comments;
        }
        List range = new ArrayList();
        for (int i=offset; i<comments.size(); i++) {
            range.add(comments.get(i));
        }
        return range;
    }

