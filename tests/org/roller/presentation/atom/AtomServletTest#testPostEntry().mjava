    //-----------------------------------------------------------------------
    public void testPostEntry() throws Exception
    {
        String username = authenticateUser();

        // set pathinfo
        mkRequest.setPathInfo("/" + username + "/entry");

        // set payload of new Atom Entry
        Entry atomEntry = newEntry();
        mkRequest.setBodyContent(atomEntry.toString());

        servletTestModule.doPost();

        MockHttpServletResponse response = mockFactory.getMockResponse();

        // make sure it didn't return an error
        //mLogger.debug("ResponseCode:" + response.getStatusCode());
        assertFalse("Returned SC_BAD_REQUEST (Error)\n" + servletTestModule.getOutput(),
                    HttpServletResponse.SC_BAD_REQUEST == response.getStatusCode());
        assertTrue("Did not return SC_SEE_OTHER status",
                   HttpServletResponse.SC_SEE_OTHER == response.getStatusCode());

        // test that AtomServlet returned a proper Location header
        String locationHeader = response.getHeader("Location");
        assertNotNull("Should return a Location header", locationHeader);
        String locWanted = "/atom/" + username + "/entry/";
        int locIndex = locationHeader.indexOf(locWanted);
        if (locIndex == -1)
        {
            fail("Location header does not contain URL of new Entry.");
        }

        // test that the Entry was persisted
        String entryId = locationHeader.substring(locIndex+locWanted.length());
        assertNotNull("New Entry Id not returned", entryId);

        WeblogEntryData rEntry = getRoller().getWeblogManager().retrieveWeblogEntry(entryId);
        assertNotNull("New Entry not found in database", rEntry);

        assertEquals("Entry titles don't match",
                     atomEntry.getTitle().getText(), rEntry.getTitle());

        rEntry = null;
        response = null;
    }

