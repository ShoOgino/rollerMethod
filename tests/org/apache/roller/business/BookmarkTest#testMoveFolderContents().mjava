    /**
     * Creates folder tree like this:
     *    root/
     *       dest/
     *       f1/
     *          b1
     *          f2/
     *             f3/
     *
     * TODO: it is unclear exactly what the expected behavior of this test is
     * supposed to be.  i.e. how the moveContents() methods are supposed to
     * work.  they could move only bookmarks, only bookmarks and folders from
     * the specified src folder, all bookmarks (recursively), or all bookmarks
     * and folder recursively.
     */
    public void testMoveFolderContents() throws Exception {
        
        BookmarkManager bmgr = getRoller().getBookmarkManager();
        
        FolderData root = bmgr.getRootFolder(testWeblog);
        
        FolderData dest = new FolderData();
        dest.setName("dest");
        dest.setParent(root);
        dest.setWebsite(testWeblog);
        bmgr.saveFolder(dest);
        
        // create source folder f1
        FolderData f1 = new FolderData();
        f1.setName("f1");
        f1.setParent(root);
        f1.setWebsite(testWeblog);
        bmgr.saveFolder(f1);
        
        // create bookmark b1 inside source folder f1
        BookmarkData b1 = new BookmarkData(
                f1, "b1", "testbookmark",
                "http://example.com", "http://example.com/rss",
                new Integer(1), new Integer(1), "image.gif");
        f1.addBookmark(b1);
        
        // create folder f2 inside f1
        FolderData f2 = new FolderData();
        f2.setName("f2");
        f2.setParent(f1);
        f2.setWebsite(testWeblog);
        bmgr.saveFolder(f2);
        
        // create bookmark b2 inside folder f2
        BookmarkData b2 = new BookmarkData(
                f2, "b2", "testbookmark",
                "http://example.com", "http://example.com/rss",
                new Integer(1), new Integer(1), "image.gif");
        f2.addBookmark(b2);
        
        // create folder f3 inside folder f2
        FolderData f3 = new FolderData();
        f3.setName("f3");
        f3.setParent(f2);
        f3.setWebsite(testWeblog);
        bmgr.saveFolder(f3);
        
        // crete bookmark b3 inside folder f3
        BookmarkData b3 = new BookmarkData(
                f3, "b3", "testbookmark",
                "http://example.com", "http://example.com/rss",
                new Integer(1), new Integer(1), "image.gif");
        f3.addBookmark(b3);
        
        TestUtils.endSession(true);
        
        // verify our new tree
        dest = bmgr.getFolder(dest.getId());
        f1 = bmgr.getFolder(f1.getId());
        f2 = bmgr.getFolder(f2.getId());
        f3 = bmgr.getFolder(f3.getId());
        assertEquals(0, dest.getBookmarks().size());
        assertEquals(1, f1.getBookmarks().size());
        assertEquals(1, f2.getBookmarks().size());
        assertEquals(1, f3.getBookmarks().size());
        assertEquals(0, dest.retrieveBookmarks(true).size());
        assertEquals(3, f1.retrieveBookmarks(true).size());
        
        // test that parent cannot be moved into child
        boolean safe = false;
        try {
            // Move folder into one of it's children
            bmgr.moveFolderContents(f1, f3);
            TestUtils.endSession(true);
        } catch (RollerException e) {
            safe = true;
        }
        assertTrue(safe);
        
        // move contents of f1 to dest
        bmgr.moveFolderContents(f1, dest);
        TestUtils.endSession(true);
        
        // after move, verify number of entries in eacch folder
        dest = bmgr.getFolder(dest.getId());
        f1 = bmgr.getFolder(f1.getId());
        assertEquals(1, dest.retrieveBookmarks(true).size());
        assertEquals(2, f1.retrieveBookmarks(true).size());
        
        bmgr.removeFolder(f1);
        bmgr.removeFolder(dest);
        TestUtils.endSession(true);
    }

